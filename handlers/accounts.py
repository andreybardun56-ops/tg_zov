# tg_zov/handlers/accounts.py
import json
import os

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import USER_ACCOUNTS_FILE
from services.accounts_manager import (
    add_account,
    remove_account,
    get_all_accounts,
    get_active_account,
    set_active_account
)
from services.castle_api import extract_player_info_from_page, refresh_cookies_mvp

router = Router()


# =============================
# ‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# =============================
class AccountManagementStates(StatesGroup):
    waiting_for_deletion_uid = State()
    waiting_for_active_uid = State()


# =============================
# üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π UID)
# =============================
def load_all_users() -> dict:
    if not os.path.exists(USER_ACCOUNTS_FILE):
        return {}
    try:
        with open(USER_ACCOUNTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, dict) else {}
    except Exception:
        return {}


# =============================
# üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
# =============================
@router.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
async def show_accounts_menu(message: types.Message):
    user_id = str(message.from_user.id)
    accounts = get_all_accounts(user_id)
    active = get_active_account(user_id)

    if not accounts:
        text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
    else:
        text = "üë§ –¢–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
        for acc in accounts:
            mark = " ‚úÖ (–∞–∫—Ç–∏–≤–Ω—ã–π)" if active and acc["uid"] == active.get("uid") else ""
            username = acc.get("username", "–ò–≥—Ä–æ–∫")
            text += f"üîπ {username} ‚Äî UID: <code>{acc['uid']}</code>{mark}\n"

    kb = [
        [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
        [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
        [types.KeyboardButton(text="üîò –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text, reply_markup=markup, parse_mode="HTML")


# =============================
# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MVP —Å—Å—ã–ª–∫—É
# =============================
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account_prompt(message: types.Message):
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é MVP —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç.")


@router.message(F.text.contains("castleclash.igg.com") & F.text.contains("signed_key"))
async def handle_mvp_link(message: types.Message):
    user_id = str(message.from_user.id)
    url = message.text.strip()

    await message.answer("üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")

    info = await extract_player_info_from_page(url)
    if not info["success"]:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {info['error']}")
        return

    uid = info.get("uid")
    username = info.get("username", "–ò–≥—Ä–æ–∫")

    if not uid:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IGG ID. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")
        return

    # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞: UID –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_data = load_all_users()
    for other_user, acc_list in all_data.items():
        if any(acc.get("uid") == uid for acc in acc_list):
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–æ—Ç IGG ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ."
            )
            return

    # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    added = add_account(user_id, uid, username, url)
    if not added:
        await message.answer(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç <code>{uid}</code> —É–∂–µ –µ—Å—Ç—å.", parse_mode="HTML")
        return

    await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{username}</b> (UID: <code>{uid}</code>) –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")

    # ‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º cookies
    await message.answer(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é cookies –¥–ª—è <b>{username}</b>...", parse_mode="HTML")
    result = await refresh_cookies_mvp(user_id, uid)

    if result.get("success"):
        await message.answer(f"üç™ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(result['cookies'])} —à—Ç.)", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è Cookies –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {result.get('error')}", parse_mode="HTML")


# =============================
# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
# =============================
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def remove_account_prompt(message: types.Message, state: FSMContext):
    await message.answer("üÜî –û—Ç–ø—Ä–∞–≤—å IGG ID –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
    await state.set_state(AccountManagementStates.waiting_for_deletion_uid)


@router.message(AccountManagementStates.waiting_for_deletion_uid, F.text.regexp(r"^\d{6,12}$"))
async def handle_uid_removal(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    uid = message.text.strip()
    success = remove_account(user_id, uid)
    if success:
        await message.answer(f"üóë –ê–∫–∫–∞—É–Ω—Ç <code>{uid}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç <code>{uid}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
    await state.clear()


# =============================
# üîò –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
# =============================
@router.message(F.text == "üîò –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π")
async def choose_active_account(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    accounts = get_all_accounts(user_id)
    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    text = "üîò –û—Ç–ø—Ä–∞–≤—å IGG ID –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º:\n\n"
    for acc in accounts:
        mark = " ‚úÖ (–∞–∫—Ç–∏–≤–Ω—ã–π)" if acc.get("active") else ""
        text += f"‚Ä¢ <code>{acc['uid']}</code>{mark}\n"

    await message.answer(text, parse_mode="HTML")
    await state.set_state(AccountManagementStates.waiting_for_active_uid)


@router.message(AccountManagementStates.waiting_for_active_uid, F.text.regexp(r"^\d{6,12}$"))
async def set_active(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    uid = message.text.strip()
    ok = set_active_account(user_id, uid)
    if ok:
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <code>{uid}</code> —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã–π.", parse_mode="HTML")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç <code>{uid}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
    await state.clear()
