# tg_zov/handlers/callback.py
import asyncio
import time
import logging
import os
import json
from aiogram import Router, types, F
from aiogram.types import Message

from config import ADMIN_IDS
from services.flop_pair import run_flop_pair, find_flop_pairs
from services.castle_machine import run_castle_machine
from services.thanksgiving_event import run_thanksgiving_event
from services.promo_code import run_promo_code, load_promo_history, save_promo_history
from services.accounts_manager import get_active_account
from services.event_manager import run_full_event_cycle

router = Router()
logger = logging.getLogger("callback")

# üîê –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–±–æ—Ä –¥–≤–∞–∂–¥—ã
_RUN_LOCK = asyncio.Lock()
PROMO_HISTORY_FILE = "data/promo_history.json"


# ---------------------------------------
# üîÑ –û–±–Ω–æ–≤–∏—Ç—å cookies (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –≤ —Ñ–æ–Ω–µ)
# ---------------------------------------
@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å cookies")
async def handle_update_cookies(message: Message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞)."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    await message.answer("‚ôªÔ∏è –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –≤ —Ñ–æ–Ω–µ...")

    async def background_update():
        from services.accounts_manager import get_all_users_accounts
        from services.castle_api import refresh_cookies_mvp

        accounts_by_user = get_all_users_accounts()
        logger.info(f"[COOKIES] –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(accounts_by_user)}")

        total_success = 0
        failures = []
        skipped = []

        total_accounts = sum(len(v) for v in accounts_by_user.values())
        done = 0

        for user_id, accounts in accounts_by_user.items():
            for account in accounts:
                done += 1
                uid = account.get("uid", "").strip()
                mvp_url = account.get("mvp_url", "").strip()
                username = account.get("username", "–ò–≥—Ä–æ–∫")

                if not uid:
                    skipped.append(f"{user_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç UID")
                    continue

                if not mvp_url:
                    skipped.append(f"{user_id}:{uid} ‚Äî –Ω–µ—Ç MVP —Å—Å—ã–ª–∫–∏")
                    continue

                progress = f"{done}/{total_accounts}"
                await message.answer(
                    f"üîÅ <b>{progress}</b> ‚Äî –æ–±–Ω–æ–≤–ª—è—é cookies –¥–ª—è <b>{username}</b> (<code>{uid}</code>)...",
                    parse_mode="HTML"
                )

                try:
                    result = await refresh_cookies_mvp(user_id, uid)
                    if result.get("success"):
                        total_success += 1
                        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <code>{uid}</code>", parse_mode="HTML")
                    else:
                        error_text = result.get("error", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        failures.append(f"{user_id}:{uid} ‚Äî {error_text}")
                        await message.answer(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å <b>{username}</b> (<code>{uid}</code>): <i>{error_text}</i>",
                            parse_mode="HTML"
                        )
                except Exception as exc:
                    logger.exception(f"[COOKIES] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies {user_id}:{uid}: {exc}")
                    failures.append(f"{user_id}:{uid} ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ <code>{uid}</code>: {exc}",
                        parse_mode="HTML"
                    )

                await asyncio.sleep(2)

        summary_lines = [
            "üìä <b>–ò—Ç–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies:</b>",
            f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{total_success}</b>",
            f"‚Ä¢ ‚ùå –û—à–∏–±–∫–∏: <b>{len(failures)}</b>",
            f"‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: <b>{len(skipped)}</b>",
        ]

        if failures:
            summary_lines.append("\n‚ùå <b>–û—à–∏–±–∫–∏:</b>")
            summary_lines.extend(f" - {item}" for item in failures)

        if skipped:
            summary_lines.append("\n‚ö†Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</b>")
            summary_lines.extend(f" - {item}" for item in skipped)

        await message.answer("\n".join(summary_lines), parse_mode="HTML")

    # üî• –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ ‚Äî –±–æ—Ç –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    asyncio.create_task(background_update())


# ---------------------------------------
# üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—ã (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)
# ---------------------------------------
@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—ã")
async def handle_find_pairs(message: Message):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ü–∏–∏ '–ù–∞–π–¥–∏ –ø–∞—Ä—É' –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã."""
    user_id = str(message.from_user.id)

    if int(user_id) not in ADMIN_IDS:
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await message.answer("üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –∏ –ø–æ–∏—Å–∫ –ø–∞—Ä...")

    result = await find_flop_pairs(user_id)

    msg = result.get("message", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä.")
    await message.answer(msg)


# ---------------------------------------
# üÉè –ù–∞–π–¥–∏ –ø–∞—Ä—É
# ---------------------------------------
@router.message(F.text == "üÉè –ù–∞–π–¥–∏ –ø–∞—Ä—É")
async def handle_flop_pair(message: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç '–ù–∞–π–¥–∏ –ø–∞—Ä—É' –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(message.from_user.id)
    from services.accounts_manager import get_all_accounts
    accounts = get_all_accounts(user_id)

    if not accounts:
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    await message.answer(f"üÉè –ó–∞–ø—É—Å–∫–∞—é –∞–∫—Ü–∏—é '–ù–∞–π–¥–∏ –ø–∞—Ä—É' –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({len(accounts)} —à—Ç)...")

    total_success = 0
    total_fail = 0
    messages = []

    for acc in accounts:
        uid = acc.get("uid")
        username = acc.get("username", "–ò–≥—Ä–æ–∫")
        if not uid:
            continue

        await message.answer(f"üéØ –ó–∞–ø—É—Å–∫ –¥–ª—è <b>{username}</b> (<code>{uid}</code>)...", parse_mode="HTML")

        try:
            result = await run_flop_pair(user_id, uid=uid)
            if result.get("success"):
                total_success += 1
            else:
                total_fail += 1
            messages.append(result.get("message", "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"))
        except Exception as e:
            total_fail += 1
            messages.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uid}: {e}")
        await asyncio.sleep(2)

    summary = (
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {total_success}\n"
        f"–û—à–∏–±–∫–∏: {total_fail}\n\n"
        "üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + "\n\n".join(messages)
    )

    await message.answer(summary, parse_mode="HTML")


# ---------------------------------------
# üß™ –¢–µ—Å—Ç
# ---------------------------------------
@router.message(F.text == "üß™ –¢–µ—Å—Ç")
async def handle_test(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω."""
    user_id = str(message.from_user.id)
    active_acc = get_active_account(user_id)

    if active_acc:
        await message.answer(
            f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: <code>{active_acc['uid']}</code>",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")


# ---------------------------------------
# üîÅ –ê–≤—Ç–æ—Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥
# ---------------------------------------
@router.message(F.text == "üîÅ –ê–≤—Ç–æ—Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥")
async def handle_manual_autocollect(message: Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–±–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–≤ —Ñ–æ–Ω–µ)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if _RUN_LOCK.locked():
        await message.answer("‚è≥ –ê–≤—Ç–æ—Å–±–æ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
        return

    await message.answer(
        "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Å–±–æ—Ä –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º‚Ä¶\n"
        "–Ø –ø—Ä–∏—à–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
    )

    async def _run():
        start_ts = time.perf_counter()
        async with _RUN_LOCK:
            try:
                result = await run_full_event_cycle(bot=message.bot, manual=True)
                took = time.perf_counter() - start_ts
                summary = (
                    f"‚úÖ <b>–†—É—á–Ω–æ–π –∞–≤—Ç–æ—Å–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n"
                    f"üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{took:.1f} —Å–µ–∫</b>\n"
                    f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '‚Äî')}"
                )
                await message.answer(summary, parse_mode="HTML")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä—É—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Å–±–æ—Ä–∞: {e}")
                await message.answer(f"‚ùå –ê–≤—Ç–æ—Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", parse_mode="HTML")

    asyncio.create_task(_run())


# ---------------------------------------
# üß© –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å (GAS) ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
# ---------------------------------------
from services.gas_event import run_gas_event

@router.message(F.text == "üß© –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å")
async def handle_gas_event(message: Message):
    """üß© –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è '–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å' –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(message.from_user.id)
    await message.answer("üß© –ó–∞–ø—É—Å–∫–∞—é —Å–æ–±—ã—Ç–∏–µ <b>–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å</b> –≤ —Ñ–æ–Ω–µ... ‚è≥", parse_mode="HTML")

    async def background_gas():
        from services.accounts_manager import get_all_accounts
        accounts = get_all_accounts(user_id)
        if not accounts:
            await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        total = len(accounts)
        success_count = 0
        fail_count = 0

        # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [run_gas_event(user_id, acc["uid"]) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for acc, res in zip(accounts, results):
            uid = acc.get("uid")
            username = acc.get("username", "–ò–≥—Ä–æ–∫")

            if isinstance(res, Exception):
                fail_count += 1
                await message.answer(f"‚ùå {username} ({uid}) ‚Äî –æ—à–∏–±–∫–∞: {res}", parse_mode="HTML")
                continue

            msg = res.get("message", "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
            await message.answer(msg, parse_mode="HTML")

            if res.get("success"):
                success_count += 1
            else:
                fail_count += 1

        report = (
            f"üß© <b>–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total}</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{fail_count}</b>"
        )
        await message.answer(report, parse_mode="HTML")

    asyncio.create_task(background_gas())
# ---------------------------------------
# ‚öôÔ∏è –°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞ ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
# ---------------------------------------
@router.message(F.text == "‚öôÔ∏è –°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞")
async def handle_castle_machine(message: types.Message):
    """‚öôÔ∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–∫—Ü–∏–∏ '–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞'."""
    from html import escape

    user_id = str(message.from_user.id)
    await message.answer("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞—é –∞–∫—Ü–∏—é <b>–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞</b> –≤ —Ñ–æ–Ω–µ... ‚è≥", parse_mode="HTML")

    async def background_castle_machine():
        from services.accounts_manager import get_all_accounts
        from services.castle_machine import run_castle_machine

        accounts = get_all_accounts(user_id)
        if not accounts:
            await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        total = len(accounts)
        success_count = 0
        fail_count = 0

        # üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        tasks = [run_castle_machine(user_id, acc["uid"]) for acc in accounts]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for acc, res in zip(accounts, results):
            uid = acc.get("uid")
            username = acc.get("username", "–ò–≥—Ä–æ–∫")

            if isinstance(res, Exception):
                fail_count += 1
                safe_err = escape(str(res))
                await message.answer(f"‚ùå {username} ({uid}) ‚Äî –æ—à–∏–±–∫–∞: <code>{safe_err}</code>", parse_mode="HTML")
                continue

            msg = res.get("message", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

            # üßπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
            try:
                await message.answer(msg, parse_mode="HTML")
            except Exception:
                # –µ—Å–ª–∏ Telegram —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–≥–∏, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                safe_msg = escape(msg)
                await message.answer(safe_msg, parse_mode="HTML")

            if res.get("success"):
                success_count += 1
            else:
                fail_count += 1

        summary = (
            f"‚öôÔ∏è <b>–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total}</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{fail_count}</b>"
        )
        await message.answer(summary, parse_mode="HTML")

    asyncio.create_task(background_castle_machine())

# ---------------------------------------
# üéÅ 10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –≤ —Ñ–æ–Ω–µ)
# ---------------------------------------
@router.message(F.text == "üéÅ 10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤")
async def handle_thanksgiving_event(message: types.Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–∫—Ü–∏–∏ '10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤' (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞)."""
    user_id = str(message.from_user.id)
    await message.answer("üéÅ –ó–∞–ø—É—Å–∫–∞—é –∞–∫—Ü–∏—é <b>10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤</b> –≤ —Ñ–æ–Ω–µ... ‚è≥", parse_mode="HTML")

    async def background_thanksgiving():
        try:
            from services.accounts_manager import get_all_accounts
            accounts = get_all_accounts(user_id)

            if not accounts:
                await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            total = len(accounts)
            success_count = 0
            fail_count = 0

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [run_thanksgiving_event(user_id, acc.get("uid")) for acc in accounts if acc.get("uid")]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ accounts/results –ø–æ –ø–æ—Ä—è–¥–∫—É uid
            seq_accounts = [acc for acc in accounts if acc.get("uid")]

            for acc, res in zip(seq_accounts, results):
                uid = acc.get("uid")
                username = acc.get("username", "–ò–≥—Ä–æ–∫")

                if isinstance(res, Exception):
                    fail_count += 1
                    await message.answer(f"‚ùå <b>{username}</b> ({uid}) ‚Äî –æ—à–∏–±–∫–∞: {res}", parse_mode="HTML")
                else:
                    msg = res.get("message", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    await message.answer(msg, parse_mode="HTML")
                    if res.get("success"):
                        success_count += 1
                    else:
                        fail_count += 1

            summary = (
                f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ü–∏–∏ '10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total}</b>\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∏: <b>{fail_count}</b>"
            )
            await message.answer(summary, parse_mode="HTML")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫—Ü–∏–∏: <code>{e}</code>", parse_mode="HTML")

    # üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ ‚Äî –±–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
    asyncio.create_task(background_thanksgiving())


# ------------------------------------------
# üéü –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
# ------------------------------------------
@router.message(F.text == "üéÅ –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
async def ask_promo_code(message: types.Message):
    await message.answer("üéÅ –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥, —è –ø–æ–ø—Ä–æ–±—É—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≤ –±–∞–∑–µ.")


@router.message(F.text.regexp(r"^[A-Za-z0-9]+$"))
async def apply_promo_code(message: types.Message):
    code = message.text.strip().upper()
    history = load_promo_history()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if code in history:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ.", parse_mode="HTML")
        return

    await message.answer(f"üöÄ –ü—Ä–æ–±—É—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...", parse_mode="HTML")

    results = await run_promo_code(code)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append(code)
    save_promo_history(history)

    # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç—á—ë—Ç—ã
    for user_id, msgs in results.items():
        if not msgs:
            continue
        text = f"üéü –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ <b>{code}</b>:\n\n" + "\n".join(msgs)
        try:
            await message.bot.send_message(user_id, text, parse_mode="HTML")
        except Exception:
            pass

    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º!", parse_mode="HTML")
