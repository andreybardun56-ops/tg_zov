import asyncio
import json
import os
import time
import base64
import itertools
import sys
import logging
from pathlib import Path
from typing import Dict, Any, List, Optional, Callable
from colorama import init
from playwright.async_api import async_playwright, Error as PWError

init(autoreset=True)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DATA_DIR = Path("data/data_akk")
LOGS_DIR = Path("logs")
LOGS_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOGS_DIR / "login_refresh.log"

CONCURRENT = 5 #–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
DELAY_AFTER_SUCCESS = 1 #–ó–∞–¥–µ—Ä–∂–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
NAV_TIMEOUT = 30_000 #–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
WAIT_AFTER_LOGIN = 5 #–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–í–æ–π—Ç–∏¬ª
SLOW_MO = 0.5 #–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ Playwright –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = logging.getLogger("login_refresh")
logger.setLevel(logging.INFO)
for h in logger.handlers[:]:
    logger.removeHandler(h)

file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
formatter = logging.Formatter("%(asctime)s %(levelname)s: %(message)s")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logging.basicConfig(level=logging.INFO, handlers=[file_handler])

file_locks: Dict[str, asyncio.Lock] = {}

# === JSON helpers ===
def atomic_write_json(path: Path, data):
    tmp = path.with_suffix(path.suffix + ".tmp")
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(str(tmp), str(path))

def load_json_safe(path: Path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        # üîß —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ UID-–∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —á–∏—Å–ª–æ–≤—ã–º–∏
        if isinstance(data, list):
            for acc in data:
                if isinstance(acc, dict):
                    for k in list(acc.keys()):
                        if isinstance(k, int):
                            acc[str(k)] = acc.pop(k)
        return data
    except Exception:
        return None

def extract_accounts(data: Any) -> List[Dict[str, Any]]:
    if isinstance(data, list):
        return data
    if isinstance(data, dict):
        if "accounts" in data and isinstance(data["accounts"], list):
            return data["accounts"]
        accs = []
        for v in data.values():
            if isinstance(v, list):
                accs.extend(v)
        return accs
    return []

# === JWT / cookies helpers ===
def jwt_get_uid(token: str) -> Optional[str]:
    try:
        parts = token.split(".")
        if len(parts) < 2:
            return None
        payload = parts[1]
        payload += "=" * (-len(payload) % 4)
        decoded = base64.urlsafe_b64decode(payload.encode("utf-8"))
        obj = json.loads(decoded.decode("utf-8"))
        for k in ("sub", "uid", "userId", "user_id", "id", "jti"):
            if k in obj and obj[k]:
                return str(obj[k])
    except Exception:
        return None
    return None

def cookies_list_to_flat_dict(cookies_list: List[Dict[str, Any]]) -> Dict[str, str]:
    out = {}
    for c in cookies_list:
        n = c.get("name")
        v = c.get("value")
        if n:
            out[n] = v
    return out

# ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ –ø—Ä—è–º–æ –≤ new_data*.json
async def update_account_in_newdata(file_path: Path, original_acc: Dict[str, Any], uid: str, new_cookies: Dict[str, str]) -> bool:
    """
    –ò—â–µ—Ç –≤ —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ mail+paswd –∏–ª–∏ –ø–æ UID-–∫–ª—é—á—É) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç
    –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É UID –Ω–∞ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å cookies.
    –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –≤ new_dataX.json: {"mail": "...", "paswd": "...", "<UID>": { ...cookies... } }
    """
    key = str(file_path.resolve())
    lock = file_locks.get(key)
    if lock is None:
        lock = asyncio.Lock()
        file_locks[key] = lock

    async with lock:
        data = load_json_safe(file_path)
        if data is None:
            logger.warning(f"[UPDATE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file_path.name}")
            return False

        changed = False
        if isinstance(data, list):
            for entry in data:
                if not isinstance(entry, dict):
                    continue

                has_uid_key = entry.get(uid) is not None
                same_creds = (
                    entry.get("mail") == original_acc.get("mail") and
                    entry.get("paswd") == original_acc.get("paswd")
                )

                if has_uid_key or same_creds:
                    entry[uid] = new_cookies
                    changed = True
                    break

        elif isinstance(data, dict) and "accounts" in data and isinstance(data["accounts"], list):
            for entry in data["accounts"]:
                if not isinstance(entry, dict):
                    continue
                has_uid_key = entry.get(uid) is not None
                same_creds = (
                    entry.get("mail") == original_acc.get("mail") and
                    entry.get("paswd") == original_acc.get("paswd")
                )
                if has_uid_key or same_creds:
                    entry[uid] = new_cookies
                    changed = True
                    break

        else:
            # –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—Ç–∏–ø–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫
            found_list = None
            if isinstance(data, dict):
                for v in data.values():
                    if isinstance(v, list):
                        found_list = v
                        break
            if isinstance(found_list, list):
                for entry in found_list:
                    if not isinstance(entry, dict):
                        continue
                    has_uid_key = entry.get(uid) is not None
                    same_creds = (
                        entry.get("mail") == original_acc.get("mail") and
                        entry.get("paswd") == original_acc.get("paswd")
                    )
                    if has_uid_key or same_creds:
                        entry[uid] = new_cookies
                        changed = True
                        break

        if not changed:
            logger.warning(f"[UPDATE] –í {file_path.name} –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (uid={uid}, mail={original_acc.get('mail')})")
            return False

        try:
            atomic_write_json(file_path, data)
            logger.info(f"[UPDATE] üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {file_path.name} –¥–ª—è UID={uid}")
            return True
        except Exception as e:
            logger.exception(f"[UPDATE] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ {file_path.name}: {e}")
            return False

# === –õ–æ–≥–∏–Ω –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
async def process_single_account(playwright, sem, file_path: Path, account: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    async with sem:
        mail = account.get("mail") or account.get("email") or account.get("user")
        passwd = account.get("paswd") or account.get("password") or account.get("pass")

        if not mail or not passwd:
            logger.info(f"[SKIP] –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç mail/paswd, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {file_path.name} / {mail}")
            return None

        browser = None
        context = None
        try:
            logger.info(f"[START] {file_path.name} ‚Üí {mail}")
            browser = await playwright.chromium.launch(headless=True, slow_mo=SLOW_MO)
            context = await browser.new_context()
            page = await context.new_page()

            login_url = "https://passport.igg.com/login"
            await page.goto(login_url, wait_until="domcontentloaded", timeout=NAV_TIMEOUT)

            # --- Accept Cookies ---
            try:
                if await page.locator("#onetrust-accept-btn-handler").count() > 0:
                    await page.locator("#onetrust-accept-btn-handler").click(timeout=3000)
                elif await page.locator("text=Accept All").count() > 0:
                    await page.locator("text=Accept All").click(timeout=3000)
                elif await page.locator("text=–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ").count() > 0:
                    await page.locator("text=–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ").click(timeout=3000)
            except Exception:
                pass

            # --- –í–≤–æ–¥ email ---
            filled_email = False
            for sel in [
                'input[name="email"]', 'input[type="email"]', 'input#email',
                'input[placeholder*="Email"]', 'input[placeholder*="E-mail"]',
                'input[placeholder*="ÈÇÆÁÆ±"]', 'input[autocomplete="email"]'
            ]:
                try:
                    el = await page.query_selector(sel)
                    if el:
                        await el.fill(str(mail), timeout=4000)
                        filled_email = True
                        break
                except Exception:
                    continue

            if not filled_email:
                try:
                    first_inp = await page.query_selector("input")
                    if first_inp:
                        await first_inp.fill(str(mail))
                except Exception:
                    pass

            # --- –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è ---
            filled_pass = False
            for sel in [
                'input[name="password"]', 'input[type="password"]', 'input#password',
                'input[placeholder*="Password"]', 'input[autocomplete="current-password"]'
            ]:
                try:
                    el = await page.query_selector(sel)
                    if el:
                        await el.fill(str(passwd), timeout=4000)
                        filled_pass = True
                        break
                except Exception:
                    continue

            # --- –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ---
            clicked = False
            for sel in [
                'button[type="submit"]', 'button:has-text("Sign In")', 'button:has-text("Log In")',
                'button:has-text("ÁôªÂΩï")', 'button:has-text("Sign in")', 'button:has-text("Log in")',
                'input[type="submit"]'
            ]:
                try:
                    btn = await page.query_selector(sel)
                    if btn:
                        await btn.click()
                        clicked = True
                        break
                except Exception:
                    continue

            if not clicked:
                try:
                    await page.keyboard.press("Enter")
                except Exception:
                    pass

            await page.wait_for_timeout(WAIT_AFTER_LOGIN * 1000)

            # --- –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ cookie –±–∞–Ω–Ω–µ—Ä–∞ ---
            try:
                if await page.locator("text=Accept All").count() > 0:
                    await page.locator("text=Accept All").click(timeout=3000)
                elif await page.locator("text=–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ").count() > 0:
                    await page.locator("text=–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ").click(timeout=3000)
            except Exception:
                pass

            # --- –°–±–æ—Ä cookies ---
            cookie_capture_timeout = 10.0
            poll_interval = 0.5
            cookies_flat = {}
            token_value = None

            try:
                await page.wait_for_load_state("networkidle", timeout=5000)
            except Exception:
                pass

            start_time = time.time()
            while time.time() - start_time < cookie_capture_timeout:
                cookies = await context.cookies()
                cookies_flat = cookies_list_to_flat_dict(cookies)
                token_value = cookies_flat.get("gpc_sso_token")
                if token_value and "PHPSESSID" in cookies_flat and "RT" in cookies_flat:
                    break
                await asyncio.sleep(poll_interval)

            uid = jwt_get_uid(token_value) if token_value else None

            # --- Fallback –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω ---
            if not uid:
                try:
                    await page.goto("https://castleclash.igg.com", timeout=15000)
                    await asyncio.sleep(2)
                    for _ in range(5):
                        cookies = await context.cookies()
                        cookies_flat = cookies_list_to_flat_dict(cookies)
                        token_value = cookies_flat.get("gpc_sso_token")
                        if token_value:
                            uid = jwt_get_uid(token_value)
                            break
                        await asyncio.sleep(0.5)
                except Exception:
                    pass

            if not uid:
                logger.info(f"[FAIL] {mail} ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω uid / token, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return None

            # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –ø—Ä—è–º–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º new_dataX.json
            ok = await update_account_in_newdata(file_path, account, str(uid), cookies_flat)
            if ok:
                logger.info(f"[OK] {mail} uid={uid} ‚Äî –∫—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {file_path.name}")
            await asyncio.sleep(DELAY_AFTER_SUCCESS)
            return {"uid": str(uid), "cookies": cookies_flat}

        except PWError as e:
            logger.exception(f"[ERROR] {mail} ‚Äî playwright error: {e}")
            return None
        except Exception as e:
            logger.exception(f"[ERROR] {mail} ‚Äî {e}")
            return None
        finally:
            try:
                if context:
                    await context.close()
                if browser:
                    await browser.close()
            except Exception:
                pass

async def process_all_files(progress_callback: Optional[Callable[[float, int, int], None]] = None):
    if not DATA_DIR.exists():
        logger.error(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATA_DIR}")
        return None

    # ‚ñ∂Ô∏è —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ new_data*.json
    files = [p for p in DATA_DIR.iterdir() if p.suffix == ".json" and p.name.startswith("new_data")]
    if not files:
        logger.error("–ù–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ –≤–∏–¥–∞ new_data*.json –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return None

    # === —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ===
    total_accounts = 0
    file_to_accounts = {}
    for file_path in files:
        data = load_json_safe(file_path)
        if data is None:
            continue

        if isinstance(data, list):
            accounts = data
        elif isinstance(data, dict) and "accounts" in data:
            accounts = data["accounts"]
        elif isinstance(data, dict):
            accounts = []
            for v in data.values():
                if isinstance(v, list):
                    accounts.extend(v)
        else:
            continue

        if accounts:
            total_accounts += len(accounts)
            file_to_accounts[file_path] = accounts

    if total_accounts == 0:
        logger.error("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    completed = 0
    start_time = time.time()
    spinner = itertools.cycle(["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"])

    async with async_playwright() as pw:
        sem = asyncio.Semaphore(CONCURRENT)
        tasks = []
        for file_path, accounts in file_to_accounts.items():
            for acc in accounts:
                tasks.append(asyncio.create_task(process_single_account(pw, sem, file_path, acc)))

        # —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        for coro in asyncio.as_completed(tasks):
            await coro
            completed += 1

            percent = completed / total_accounts
            filled = int(percent * 20)
            bar = "‚ñà" * filled + "-" * (20 - filled)

            elapsed = time.time() - start_time
            est_total = elapsed / completed * total_accounts if completed else 0
            remaining = max(est_total - elapsed, 0)
            spinner_icon = next(spinner)

            sys.stdout.write(
                f"\r{spinner_icon} [{bar}] {percent * 100:5.1f}% | {completed:3d}/{total_accounts} | –û—Å—Ç–∞–ª–æ—Å—å ~{remaining:5.1f} —Å–µ–∫"
            )
            sys.stdout.flush()

        total_time = time.time() - start_time
        sys.stdout.write(
            f"\r‚úÖ [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100% | –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {total_time / 60:.1f} –º–∏–Ω.\n"
        )
        sys.stdout.flush()

        # ‚úÖ –≤—ã–∑—ã–≤–∞–µ–º callback –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ –∏ —É–±—Ä–∞—Ç—å)
        if progress_callback:
            try:
                await progress_callback(1.0, completed, total_accounts)
            except Exception:
                pass

    return None

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(process_all_files())
