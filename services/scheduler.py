import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import logging

from services.farm_puzzles_auto import run_farm_puzzles_for_all
from services.event_checker import check_all_events
from services.logger import logger
from config import ADMIN_IDS

_scheduler_started = False
_daily_enabled = False

def trigger_daily_flag(value: bool):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ 00:02 –ú–°–ö (—Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –≤–ø–µ—Ä–≤—ã–µ)."""
    global _daily_enabled
    _daily_enabled = value
    logger.info(f"[SCHED] daily_enabled={_daily_enabled}")

async def _sleep_until(dt: datetime):
    now = datetime.now(dt.tzinfo)
    seconds = max(0, (dt - now).total_seconds())
    await asyncio.sleep(seconds)

def _next_msk_0002() -> datetime:
    tz = ZoneInfo("Europe/Moscow")
    now = datetime.now(tz)
    target = now.replace(hour=8, minute=2, second=0, microsecond=0)
    if target <= now:
        target += timedelta(days=1)
    return target

async def _loop(bot=None):
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–∞—Ä–º + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ü–∏–π."""
    global _daily_enabled
    while True:
        target = _next_msk_0002()
        logger.info(f"[SCHED] Next run at {target.isoformat()}")
        await _sleep_until(target)

        if not _daily_enabled:
            logger.info("[SCHED] –ü—Ä–æ–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á (disabled)")
            continue

        logger.info("[SCHED] üß© –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")

        # === üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π ===
        try:
            admin_id = ADMIN_IDS[0] if ADMIN_IDS else None
            if admin_id:
                results = await check_all_events(admin_id)
                summary = "üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ü–∏–π:</b>\n\n"
                for name, active in results.items():
                    emoji = "‚úÖ" if active else "‚ö†Ô∏è"
                    summary += f"{emoji} {name}\n"

                if bot:
                    try:
                        await bot.send_message(admin_id, summary, parse_mode="HTML")
                    except Exception as e:
                        logger.warning(f"[SCHED] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

                logger.info("[SCHED] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                logger.warning("[SCHED] –ù–µ—Ç ADMIN_IDS, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ü–∏–π.")
        except Exception as e:
            logger.exception(f"[SCHED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ü–∏–π: {e}")

        # === üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞—Ä–º –ø–∞–∑–ª–æ–≤ ===
        try:
            logger.info("[SCHED] üöÄ –ó–∞–ø—É—Å–∫ farm_puzzles_for_all...")
            await run_farm_puzzles_for_all(bot)
            logger.info("[SCHED] ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–∞—Ä–º –∑–∞–≤–µ—Ä—à—ë–Ω")
        except Exception as e:
            logger.exception(f"[SCHED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞—Ä–º–∞: {e}")
        # === üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞—Ä–º –ø–∞–∑–ª–æ–≤ ===
        try:
            logger.info("[SCHED] üöÄ –ó–∞–ø—É—Å–∫ farm_puzzles_for_all...")
            await run_farm_puzzles_for_all(bot)
            logger.info("[SCHED] ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–∞—Ä–º –∑–∞–≤–µ—Ä—à—ë–Ω")
        except Exception as e:
            logger.exception(f"[SCHED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞—Ä–º–∞: {e}")

async def ensure_scheduler_started(bot=None):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."""
    global _scheduler_started
    if _scheduler_started:
        return
    _scheduler_started = True
    asyncio.create_task(_loop(bot))
    logger.info("[SCHED] started")
