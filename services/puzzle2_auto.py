# services/puzzle2_auto.py
import os
import asyncio
import warnings
import logging
import json
import tempfile
import shutil
import time
import random
import inspect
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List
from tqdm.asyncio import tqdm_asyncio
from playwright.async_api import async_playwright

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏—à–∏–Ω—ã –¥–ª—è asyncio –∏ Playwright ===
def silence_asyncio_exceptions(loop, context):
    msg = context.get("message")
    exc = context.get("exception")
    if isinstance(exc, asyncio.CancelledError):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if exc and "Target page, context or browser has been closed" in str(exc):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    if msg and "Future exception was never retrieved" in msg:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´Future not retrieved¬ª
    loop.default_exception_handler(context)

try:
    loop = asyncio.get_running_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
loop.set_exception_handler(silence_asyncio_exceptions)

# üîá –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ Playwright –∏ asyncio
warnings.filterwarnings("ignore", category=RuntimeWarning)
logging.getLogger("asyncio").setLevel(logging.ERROR)
logging.getLogger("playwright").setLevel(logging.WARNING)
base = "https://event-eu-cc.igg.com/event/puzzle2/ajax.req.php"
# === –ò–º–ø–æ—Ä—Ç stealth ===
try:
    from playwright_stealth import stealth_async
except Exception:
    try:
        from playwright_stealth import stealth
        stealth_async = stealth
    except Exception:
        stealth_async = None

from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List
from tqdm.asyncio import tqdm_asyncio
from playwright.async_api import async_playwright

# === –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã ===
DATA_DIR = Path("data/data_akk")
LOG_DIR = Path("data/logs")
SCREEN_DIR = Path("data/screenshots")
DATA_FILE = Path("data/puzzle_data.jsonl")
FAIL_DIR = Path("data/failures")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CONCURRENT = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞–æ–≤
REQUEST_TIMEOUT = 40000  #–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
COOKIE_CAPTURE_WAIT = 3     #–ñ–¥—ë—Ç –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫—É–∫–∏
DELAY_BETWEEN_ACCOUNTS = 3   #–ü–∞—É–∑–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
DELAY_BETWEEN_LOTTERY = 1.5    #–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ lottery

HEADLESS = True
# –ü—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Chrome (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π Chrome).
# –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—à—å None ‚Äî Playwright –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–±–æ—Ä–∫—É Chromium.
# –ü—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Chrome (Windows)
import platform

if platform.system() == "Windows":
    BROWSER_PATH = r".venv\Chrome\Application\chrome.exe"
else:
    BROWSER_PATH = "/usr/bin/google-chrome-stable"
# –ø—Ä–∏–º–µ—Ä Windows: r"C:\Program Files\Google\Chrome\Application\chrome.exe"
# –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è persistent –ø—Ä–æ—Ñ–∏–ª–µ–π (user_data_dir)
PROFILE_BASE_DIR = Path("data/chrome_profiles")
PROFILE_BASE_DIR.mkdir(parents=True, exist_ok=True)
# üõ† –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫—É (Windows)
try:
    import subprocess
    subprocess.run([
        "icacls", str(PROFILE_BASE_DIR),
        "/grant", f"{os.getlogin()}:(OI)(CI)F", "/T"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
except Exception:
    pass
# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞)
SLOW_MO = 50  # –º—Å
# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
LOG_DIR.mkdir(parents=True, exist_ok=True)
FAIL_DIR.mkdir(parents=True, exist_ok=True)
logger = logging.getLogger("puzzle2_auto")
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(LOG_DIR / "puzzle2_auto.log", encoding="utf-8", mode="w")
file_handler.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s", datefmt="%H:%M:%S"))
logger.handlers.clear()
logger.addHandler(file_handler)

# ---------------- helpers ----------------
def get_random_browser_profile():
    UAS = [
        # desktop
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit(537.36) (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit(537.36) (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Safari/605.1.15",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit(537.36) (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        # mobile
        "Mozilla/5.0 (iPhone; CPU iPhone OS 16_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Linux; Android 10; SM-A205U) AppleWebKit(537.36) (KHTML, like Gecko) Chrome/89.0.4389.105 Mobile Safari/537.36",
        "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit(537.36) (KHTML, like Gecko) Chrome/120.0 Mobile Safari/537.36",
    ]

    viewports = [
        {"width": 360, "height": 640},  # —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã
        {"width": 375, "height": 667},
        {"width": 390, "height": 844},
        {"width": 412, "height": 915},
        {"width": 768, "height": 1024},  # –ø–ª–∞–Ω—à–µ—Ç—ã
        {"width": 800, "height": 600},
        {"width": 1024, "height": 768},
    ]

    locales = ["en-US", "en-GB", "ru-RU", "de-DE", "fr-FR"]
    timezones = [
        "Europe/Moscow", "Europe/Prague", "America/New_York",
        "Asia/Shanghai", "Asia/Tokyo", "Europe/London"
    ]
    accept_languages = [
        "en-US,en;q=0.9",
        "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "de-DE,de;q=0.9,en;q=0.8",
        "fr-FR,fr;q=0.9,en;q=0.8"
    ]

    ua = random.choice(UAS)
    vp = random.choice(viewports)
    locale = random.choice(locales)
    timezone = random.choice(timezones)
    accept_language = random.choice(accept_languages)

    is_mobile = ("Mobile" in ua) or ("iPhone" in ua) or ("Android" in ua)

    device_scale_factor = random.choice([1, 1, 1.5, 2])  # —á–∞—â–µ 1
    hardware_concurrency = random.choice([2, 4, 6, 8])

    return {
        "user_agent": ua,
        "viewport": vp,
        "locale": locale,
        "timezone": timezone,
        "accept_language": accept_language,
        "is_mobile": is_mobile,
        "device_scale_factor": device_scale_factor,
        "hardware_concurrency": hardware_concurrency,
    }


async def humanize_pre_action(page):
    """–ù–µ–±–æ–ª—å—à–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    try:
        await page.mouse.move(100 + random.randint(-20, 20), 100 + random.randint(-15, 15), steps=random.randint(6, 12))
        await asyncio.sleep(0.15 + random.random() * 0.35)
        await page.mouse.move(200 + random.randint(-30, 30), 140 + random.randint(-20, 20), steps=random.randint(5, 9))
        await asyncio.sleep(0.05 + random.random() * 0.2)
        # –ª—ë–≥–∫–∏–π —Å–∫—Ä–æ–ª–ª –∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–æ–≥–ª—è–¥–µ–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.mouse.wheel(0, random.randint(100, 300))
        await asyncio.sleep(0.1 + random.random() * 0.25)
    except Exception:
        pass


def load_accounts() -> List[Dict[str, Any]]:
    """–°—á–∏—Ç–∞—Ç—å –≤—Å–µ new_data*.json –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å uid+cookies+mail"""
    out = []
    if not DATA_DIR.exists():
        logger.error("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", DATA_DIR)
        return out
    for f in sorted(DATA_DIR.glob("new_data*.json")):
        try:
            with open(f, "r", encoding="utf-8") as fh:
                data = json.load(fh)
            if isinstance(data, list):
                for entry in data:
                    mail = entry.get("mail")
                    for k, v in entry.items():
                        if k.isdigit() and isinstance(v, dict):
                            out.append({"file": f.name, "mail": mail, "uid": k, "cookies": v})
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s: %s", f.name, e)
    return out


def cookies_to_playwright(cookies: Dict[str, str], domain: str = ".event-eu-cc.igg.com") -> List[Dict[str, Any]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç {name: value} –≤ —Ñ–æ—Ä–º–∞—Ç Playwright cookie"""
    return [{"name": str(k), "value": str(v), "domain": domain, "path": "/"} for k, v in cookies.items()]


def save_puzzle_data(entry: dict, file_path: Path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ"""
    file_path.parent.mkdir(parents=True, exist_ok=True)
    entry["time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    existing = []
    updated = False

    if file_path.exists():
        with open(file_path, "r", encoding="utf-8") as f:
            buffer = ""
            for line in f:
                if line.strip():
                    buffer += line
                else:
                    try:
                        data = json.loads(buffer)
                        if data.get("iggid") == entry.get("iggid"):
                            existing.append(entry)
                            updated = True
                        else:
                            existing.append(data)
                    except Exception:
                        pass
                    buffer = ""
            if buffer.strip():
                try:
                    data = json.loads(buffer)
                    if data.get("iggid") == entry.get("iggid"):
                        existing.append(entry)
                        updated = True
                    else:
                        existing.append(data)
                except Exception:
                    pass

    if not updated:
        existing.append(entry)

    temp_fd, temp_path = tempfile.mkstemp(dir=file_path.parent)
    with open(temp_fd, "w", encoding="utf-8") as tmp:
        for obj in existing:
            json.dump(obj, tmp, ensure_ascii=False, indent=2)
            tmp.write("\n\n")
    shutil.move(temp_path, file_path)

def jitter(base: float, variance: float = 0.5):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É: base ¬± (0..variance*base)
    –ü—Ä–∏–º–µ—Ä: jitter(3, 0.5) -> —á–∏—Å–ª–æ –≤ ~[1.5, 4.5]
    """
    # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å random.uniform –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–±—Ä–æ—Å–∞
    delta = random.uniform(-variance * base, variance * base)
    return max(0.1, base + delta)

def calculate_puzzle_totals(file_path: Path):
    """–°—á–∏—Ç–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∑–ª–∞ (1‚Äì9) –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç—ã)."""
    totals = {str(i): 0 for i in range(1, 10)}
    count_accounts = 0

    if not file_path.exists():
        logger.warning("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø–∞–∑–ª–æ–≤", file_path)
        return totals

    with open(file_path, "r", encoding="utf-8") as f:
        buffer = ""
        for line in f:
            if line.strip():
                buffer += line
            else:
                if buffer.strip():
                    try:
                        data = json.loads(buffer)
                        puzzle_data = data.get("puzzle", {})
                        for pid, count in puzzle_data.items():
                            if pid in totals:
                                totals[pid] += int(count)
                        count_accounts += 1
                    except Exception:
                        pass
                    buffer = ""
        if buffer.strip():
            try:
                data = json.loads(buffer)
                puzzle_data = data.get("puzzle", {})
                for pid, count in puzzle_data.items():
                    if pid in totals:
                        totals[pid] += int(count)
                count_accounts += 1
            except Exception:
                pass

    total_sum = sum(totals.values())
    logger.info("=== üß© –ò—Ç–æ–≥–∏ –ø–æ –ø–∞–∑–ª–∞–º (—Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç—ã) ===")
    for pid, cnt in totals.items():
        logger.info(f"–ü–∞–∑–ª {pid}: {cnt} —à—Ç.")
    logger.info("=========================")
    logger.info(f"–í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_sum}")
    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count_accounts}")

    summary_path = Path("data/puzzle_summary.json")
    with open(summary_path, "w", encoding="utf-8") as out:
        json.dump({
            "totals": totals,
            "accounts": count_accounts,
            "all_duplicates": total_sum,
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }, out, ensure_ascii=False, indent=2)

    return totals

# ---------------- per-account workflow ----------------
async def process_account(account: Dict[str, Any], p) -> None:
    uid = account.get("uid")
    mail = account.get("mail", "?")
    cookies = account.get("cookies", {})
    context = page = None
    start_time = time.perf_counter()

    try:
        logger.info("[%s] ‚Üí —Å—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (mail=%s)", uid, mail)

        # 1 / 3 / 4 ‚Äî –ø—Ä–æ—Ñ–∏–ª—å + –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        profile = get_random_browser_profile()
        ua = profile["user_agent"]
        vp = profile["viewport"]
        locale = profile["locale"]

        PROFILE_BASE_DIR.mkdir(parents=True, exist_ok=True)
        user_data_dir = str(PROFILE_BASE_DIR / f"{uid}")

        # === —Å–∫—Ä—ã—Ç—ã–π —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (headless masked) ===
        window_args = [
            "--headless=new",  # —Ñ–æ–Ω –±–µ–∑ –æ–∫–Ω–∞
            "--disable-gpu",
            "--mute-audio",
            "--no-sandbox",
            "--disable-dev-shm-usage",
            "--disable-blink-features=AutomationControlled",
            "--disable-infobars",
            "--hide-scrollbars",
            "--window-size=1920,1080",
            "--blink-settings=imagesEnabled=true",
            "--disable-extensions",
            "--disable-translate",
            "--disable-background-timer-throttling",
            "--disable-backgrounding-occluded-windows",
            "--disable-renderer-backgrounding",
        ]

        launch_kwargs = dict(
            headless=True,  # –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
            slow_mo=SLOW_MO,
            viewport=vp,
            user_agent=ua,
            locale=locale,
            timezone_id=profile["timezone"],
            is_mobile=profile["is_mobile"],
            device_scale_factor=profile["device_scale_factor"],
            java_script_enabled=True,
            args=window_args,
        )

        if BROWSER_PATH:
            launch_kwargs["executable_path"] = BROWSER_PATH

        logger.info("[%s] üï∂ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (headless masked)", uid)
        context = await p.chromium.launch_persistent_context(user_data_dir, **launch_kwargs)

        # === –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ headless —á–µ—Ä–µ–∑ JS ===
        try:
            patch_script = """
                Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
                window.chrome = { runtime: {} };
                Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3] });
                Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru', 'en-US'] });
                Object.defineProperty(Notification, 'permission', { get: () => 'default' });
                Object.defineProperty(navigator, 'pdfViewerEnabled', { get: () => true });
                const getParameter = WebGLRenderingContext.prototype.getParameter;
                WebGLRenderingContext.prototype.getParameter = function(param) {
                    if (param === 37445) return 'NVIDIA GeForce RTX 3080';
                    if (param === 37446) return 'Google Inc. (NVIDIA)';
                    return getParameter(param);
                };
            """
            # –ò–º–∏—Ç–∞—Ü–∏—è navigator.connection –∏ deviceMemory (Akamai check)
            connection_patch = """
            Object.defineProperty(navigator, 'connection', {
              value: { rtt: 50, downlink: 10, effectiveType: '4g', saveData: false },
              configurable: true
            });
            Object.defineProperty(navigator, 'deviceMemory', { value: 8 });
            """
            await context.add_init_script(connection_patch)

            await context.add_init_script(patch_script)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            extra_mask_patch = """
            try {
              // –º–∞—Å–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ permissions
              if (navigator.permissions && navigator.permissions.query) {
                const orig = navigator.permissions.query;
                navigator.permissions.query = (param) => (
                  param && param.name === 'notifications'
                    ? Promise.resolve({ state: Notification.permission })
                    : orig(param)
                );
              }
              // –º–∞—Å–∫–∏—Ä—É–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
              Object.defineProperty(navigator, 'hardwareConcurrency', { value: 8 });
              Object.defineProperty(navigator, 'maxTouchPoints', { value: 1 });
            } catch (e) {}
            """
            await context.add_init_script(extra_mask_patch)

            logger.info("[%s] üß© Headless patch –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", uid)
        except Exception as e:
            logger.warning("[%s] ‚ö†Ô∏è –û—à–∏–±–∫–∞ headless patch: %s", uid, e)

        # 4 ‚Äî Accept-Language —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        try:
            await context.set_extra_http_headers({"Accept-Language": profile["accept_language"]})
        except Exception:
            pass

        page = await context.new_page()

        # –ï—Å–ª–∏ –µ—Å—Ç—å cookies –∏–∑ —Ñ–∞–π–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚Äî –¥–æ–±–∞–≤–∏–º (—ç—Ç–æ –ù–ï –ø—É–Ω–∫—Ç 10: –º—ã –Ω–µ –≥—Ä—É–∑–∏–º –≤–Ω–µ—à–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ã)
        try:
            if cookies:
                await context.add_cookies(cookies_to_playwright(cookies))
        except Exception as e:
            logger.warning("[%s] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å cookies: %s", uid, e)

        # 6 ‚Äî –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π init_script (webdriver/languages/plugins/hardwareConcurrency/permissions)
        try:
            lang_list = ["en-US", "en"]
            if locale.startswith("ru"):
                lang_list = ["ru-RU", "ru", "en-US", "en"]
            elif locale.startswith("de"):
                lang_list = ["de-DE", "de", "en-US", "en"]
            elif locale.startswith("fr"):
                lang_list = ["fr-FR", "fr", "en-US", "en"]

            init_script = f"""
            (() => {{
                try {{
                    Object.defineProperty(navigator, 'webdriver', {{ get: () => undefined, configurable: true }});
                    Object.defineProperty(navigator, 'languages', {{ get: () => {json.dumps(lang_list)}, configurable: true }});
                    Object.defineProperty(navigator, 'hardwareConcurrency', {{ get: () => {profile['hardware_concurrency']}, configurable: true }});
                    // –ø—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è plugins/mimeTypes ‚Äî –±–µ–∑ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    const pluginArray = [1,2,3];
                    Object.defineProperty(navigator, 'plugins', {{ get: () => pluginArray, configurable: true }});
                    Object.defineProperty(navigator, 'mimeTypes', {{ get: () => pluginArray, configurable: true }});
                    // permissions patch (—á–∞—Å—Ç—ã–π —á–µ–∫)
                    if (navigator.permissions && navigator.permissions.query) {{
                        const orig = navigator.permissions.query.bind(navigator.permissions);
                        navigator.permissions.query = (params) => {{
                            if (params && params.name === 'notifications') {{
                                return Promise.resolve({{ state: Notification.permission }});
                            }}
                            return orig(params);
                        }};
                    }}
                }} catch (e) {{}}
            }})();
            """
            await context.add_init_script(init_script)
        except Exception as e:
            logger.warning("[%s] add_init_script error: %s", uid, e)

        # 7 ‚Äî stealth: –ø—Ä–æ–±—É–µ–º async –∏ sync
        if stealth_async is not None:
            try:
                # –µ—Å–ª–∏ stealth_async ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (defined with `async def`)
                if inspect.iscoroutinefunction(stealth_async):
                    await stealth_async(page)
                else:
                    # –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é (sync) ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –≤–µ—Ä–Ω—ë—Ç awaitable (–∫–æ—Ä—É—Ç–∏–Ω—É)
                    result = stealth_async(page)
                    # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç awaitable ‚Äî await'–∏–º –µ–≥–æ
                    if inspect.isawaitable(result):
                        await result
            except Exception as e:
                logger.warning("[%s] stealth failed: %s", uid if 'uid' in locals() else "?", e)

        # 8 ‚Äî –ª—ë–≥–∫–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞
        await humanize_pre_action(page)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ cookie banner
        await page.goto("https://event-eu-cc.igg.com/event/puzzle2/", wait_until="networkidle", timeout=REQUEST_TIMEOUT)
        # --- üîÑ –û–±–Ω–æ–≤–ª—è–µ–º cookies –ø–æ—Å–ª–µ –∑–∞—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ uid) ---
        await asyncio.sleep(jitter(2.5, variance=0.4))
        try:
            fresh_cookies = await context.cookies()
            # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ {name: value}
            cookie_dict = {c.get("name"): c.get("value") for c in fresh_cookies if "name" in c and "value" in c}

            if cookie_dict:
                # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º new_data*.json –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                for file_path in sorted(DATA_DIR.glob("new_data*.json")):
                    try:
                        with open(file_path, "r", encoding="utf-8") as fh:
                            data = json.load(fh)
                    except Exception:
                        # –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
                        continue

                    changed = False
                    # data ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    if isinstance(data, list):
                        for entry in data:
                            # entry ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"mail": "...", "1100209271": {...}, ...}
                            # –∏—â–µ–º –∫–ª—é—á —Ä–∞–≤–Ω—ã–π uid (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
                            if str(uid) in entry and isinstance(entry.get(str(uid)), dict):
                                # –∑–∞–º–µ–Ω—è–µ–º cookies —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ uid –Ω–∞ {name: value}
                                entry[str(uid)] = cookie_dict
                                changed = True
                                break

                    if changed:
                        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª (atomic)
                        tmp_fd, tmp_path = tempfile.mkstemp(dir=file_path.parent)
                        try:
                            with os.fdopen(tmp_fd, "w", encoding="utf-8") as tmpf:
                                json.dump(data, tmpf, ensure_ascii=False, indent=2)
                            shutil.move(tmp_path, file_path)
                            logger.info("[%s] üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s", uid, file_path.name)
                        except Exception as e:
                            # –ø–æ–ø—ã—Ç–∫–∞ —É–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                            try:
                                os.remove(tmp_path)
                            except Exception:
                                pass
                            logger.warning("[%s] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ cookies –≤ %s: %s", uid,
                                           file_path.name, e)
                        # –Ω–∞—à–ª–∏ –∏ –æ–±–Ω–æ–≤–∏–ª–∏ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª ‚Äî –±–æ–ª—å—à–µ –Ω–µ –∏—â–µ–º
                        break
        except Exception as e:
            logger.warning("[%s] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å cookies: %s", uid, e)

        await asyncio.sleep(COOKIE_CAPTURE_WAIT)

        try:
            btn = page.locator("#onetrust-accept-btn-handler")
            if await btn.count() > 0:
                await asyncio.sleep(0.2 + random.random() * 0.3)
                await btn.click(timeout=2000)
        except Exception:
            pass
        # üß© –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å lottery ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–Ω—Å—ã
        try:
            await asyncio.sleep(jitter(DELAY_BETWEEN_LOTTERY, variance=0.5))
            js = f"""
                async () => {{
                    const res = await fetch('{base}?action=lottery', {{
                        method: 'GET',
                        credentials: 'include',
                        headers: {{
                            'X-Requested-With': 'XMLHttpRequest',
                            'Referer': 'https://event-eu-cc.igg.com/event/puzzle2/'
                        }}
                    }});
                    const txt = await res.text();
                    return {{status: res.status, text: txt}};
                }}
            """
            resp = await page.evaluate(js)
            text = resp.get("text", "")
            status = resp.get("status", 0)
            logger.info(f"[{uid}] üéØ –û—Ç–≤–µ—Ç lottery: {status} | {text[:200]}")

            # –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
            try:
                data = json.loads(text)
                err = data.get("error")
                st = data.get("status")
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 1 ‚Äî —à–∞–Ω—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                if (err == 1 or err == "1") and st == 0:
                    logger.info(f"[{uid}] üö´ –®–∞–Ω—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ lottery.")
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π ‚Äî –¥–µ–ª–∞–µ–º –µ—â—ë 2 –∑–∞–ø—Ä–æ—Å–∞
                elif st == 1:
                    logger.info(f"[{uid}] ‚úÖ –õ–æ—Ç–µ—Ä–µ—è —É—Å–ø–µ—à–Ω–∞ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—â—ë 2 –∑–∞–ø—Ä–æ—Å–∞.")
                    for j in range(2):
                        await asyncio.sleep(jitter(DELAY_BETWEEN_LOTTERY, variance=0.5))
                        await page.evaluate(f"""
                            async () => {{
                                await fetch('{base}?action=lottery', {{
                                    method: 'GET',
                                    credentials: 'include'
                                }});
                            }}
                        """)
                        logger.info(f"[{uid}] üîÅ lottery –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π {j + 1}/2 –≤—ã–ø–æ–ª–Ω–µ–Ω")
                else:
                    logger.info(f"[{uid}] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç lottery: {text[:150]}")
            except Exception:
                logger.warning(f"[{uid}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç lottery, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        except Exception as e:
            logger.warning(f"[{uid}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º lottery: {e}")

        # üëÄ –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        await humanize_pre_action(page)
        await asyncio.sleep(1.5 + random.random() * 2.0)

        # üß© –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º get_resource
        try:
            cookies_before = await context.cookies("https://event-eu-cc.igg.com/")
            if cookies_before:
                cookie_names = [c.get("name") for c in cookies_before]
                logger.info("[%s] üç™ –ù–∞–π–¥–µ–Ω—ã cookies –ø–µ—Ä–µ–¥ get_resource: %s", uid, ", ".join(cookie_names))
            else:
                logger.warning("[%s] ‚ö†Ô∏è –ö—É–∫–∏ –ø–µ—Ä–µ–¥ get_resource –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", uid)
        except Exception as e:
            logger.warning("[%s] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies: %s", uid, e)

        # === get_resource ===
        await asyncio.sleep(jitter(1.5, variance=1.0))  # –ø–∞—É–∑–∞ 0.5‚Äì3 —Å–µ–∫
        try:
            # üëÄ –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await humanize_pre_action(page)
            await asyncio.sleep(1.0 + random.random() * 2.0)

            # üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ JS –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            js_code = f"""
                async () => {{
                    const res = await fetch('{base}?action=get_resource', {{
                        method: 'POST',
                        credentials: 'include',
                        headers: {{
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json, text/javascript, */*; q=0.01',
                            'Referer': 'https://event-eu-cc.igg.com/event/puzzle2/'
                        }}
                    }});
                    return await res.text();
                }}
            """
            text = await page.evaluate(js_code)

            # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # raw_path = FAIL_DIR / f"{uid}_get_resource_raw.txt"
            # raw_path.write_text(text, encoding="utf-8")
            # logger.info("[%s] üíæ –û—Ç–≤–µ—Ç get_resource —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ %s", uid, raw_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî JSON –ª–∏ —ç—Ç–æ
            if not text.strip().startswith("{"):
                debug_path = FAIL_DIR / f"{uid}_get_resource_response.html"
                debug_path.write_text(text, encoding="utf-8")
                logger.error("[%s] ‚ö†Ô∏è get_resource: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ %s", uid, debug_path)
                return

            # ‚úÖ –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(text)
            logger.info("[%s] ‚úÖ get_resource –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", uid)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä)
            data_section = data.get("data", {})

            if isinstance(data_section, list) and len(data_section) > 0:
                user = data_section[0].get("user", {})
            elif isinstance(data_section, dict):
                user = data_section.get("user", {})
            else:
                user = {}

            # üîç –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å extra_info –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            extra_info = user.get("extra_info", {})
            logger.info("[%s] üß© EXTRA_INFO: %s", uid, json.dumps(extra_info, ensure_ascii=False))

            # üß† –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø, –µ—Å–ª–∏ –ø–∞–∑–ª—ã –ø—Ä–∏—à–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            puzzle_data = extra_info.get("puzzle", {})
            if isinstance(puzzle_data, str):
                try:
                    puzzle_data = json.loads(puzzle_data)
                    logger.info("[%s] üß© puzzle –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ JSON", uid)
                except Exception:
                    logger.warning("[%s] ‚ö†Ô∏è puzzle –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å: %s", uid, puzzle_data)
                    puzzle_data = {}

            entry = {
                "iggid": user.get("iggid"),
                "ec_param": user.get("ec_param"),
                "puzzle": puzzle_data,
                "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            # –¢–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç—ã (–º–∏–Ω—É—Å 1 –æ—Ä–∏–≥–∏–Ω–∞–ª)
            duplicates = {}
            for pid, count in puzzle_data.items():
                try:
                    count = int(count)
                    if count >= 2:
                        duplicates[pid] = count - 1
                except Exception:
                    continue

            if duplicates:
                entry["puzzle"] = duplicates
                save_puzzle_data(entry, DATA_FILE)
                logger.info("[%s] ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–∞–∑–ª–æ–≤: %s ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", uid, duplicates)
                # üé® –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–∞–∑–ª–æ–≤ 3√ó3
                try:
                    import colorama
                    from colorama import Fore, Style
                    colorama.init()

                    grid = [[" " for _ in range(3)] for _ in range(3)]
                    for pid, count in puzzle_data.items():
                        idx = int(pid) - 1
                        row, col = divmod(idx, 3)
                        if count >= 2:
                            # –≤—ã–¥–µ–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–µ–ª—ë–Ω—ã–º
                            grid[row][col] = f"{Fore.GREEN}{count}{Style.RESET_ALL}"
                        else:
                            grid[row][col] = str(count)

                    logger.info("[%s] üß© –†–∞—Å–∫–ª–∞–¥ –ø–∞–∑–ª–æ–≤:", uid)
                    for r in grid:
                        logger.info("[%s]    %s", uid, "  ".join(r))
                except Exception as e:
                    logger.warning("[%s] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–∑–ª–æ–≤: %s", uid, e)

                # üíæ –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø–æ–¥—Å—á—ë—Ç –ø–∞–∑–ª–æ–≤
                try:
                    calculate_puzzle_totals(DATA_FILE)
                    logger.info("[%s] üîÑ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª puzzle_summary.json –æ–±–Ω–æ–≤–ª—ë–Ω", uid)
                except Exception as e:
                    logger.warning("[%s] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å puzzle_summary.json: %s", uid, e)
            else:
                logger.info("[%s] ‚ùå –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫", uid)

        except Exception as e:
            # 9 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ
            try:
                if page:
                    await page.screenshot(path=str(FAIL_DIR / f"{uid}_exception.png"))
                    html = await page.content()
                    (FAIL_DIR / f"{uid}_exception.html").write_text(html, encoding="utf-8")
            except Exception:
                pass
            logger.error("[%s] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: %s", uid, e)
    finally:
        duration = round(time.perf_counter() - start_time, 2)
        logger.info("[%s] ‚è± –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ %s —Å–µ–∫.", uid, duration)
        try:
            if page:
                await page.close()
            if context:
                await context.close()
        except Exception:
            pass
        # üßπ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            user_data_dir_path = Path(PROFILE_BASE_DIR / f"{uid}")
            if user_data_dir_path.exists():
                shutil.rmtree(user_data_dir_path, ignore_errors=True)
                logger.info("[%s] üßπ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞: %s", uid, user_data_dir_path)
        except Exception as e:
            logger.warning("[%s] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %s", uid, e)
        await asyncio.sleep(jitter(DELAY_BETWEEN_ACCOUNTS, variance=0.6))
# ---------------- main ----------------
async def main():
    accounts = load_accounts()
    if not accounts:
        logger.error("–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ %s", DATA_DIR)
        return
    start_time = time.perf_counter()
    stats = {"total": len(accounts), "success": 0, "fail": 0}
    logger.info("–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: %d", len(accounts))
    sem = asyncio.Semaphore(CONCURRENT)

    async with async_playwright() as p:

        async def worker(acc):
            async with sem:
                try:
                    await process_account(acc, p)
                    stats["success"] += 1
                except Exception as e:
                    stats["fail"] += 1
                    logger.error(f"[{acc.get('uid')}] ‚ùå –û—à–∏–±–∫–∞: {e}")

        tasks = [asyncio.create_task(worker(acc)) for acc in accounts]
        await tqdm_asyncio.gather(*tasks, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", total=len(tasks))

    # ‚úÖ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏ –ø–∞–∑–ª–æ–≤
    try:
        calculate_puzzle_totals(DATA_FILE)
        logger.info("üßÆ –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ–¥—Å—á—ë—Ç –ø–∞–∑–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –ø–∞–∑–ª—ã: %s", e)

    total_time = round(time.perf_counter() - start_time, 2)
    logger.info("=== ‚úÖ –ò—Ç–æ–≥ ===")
    logger.info(f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['total']}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ: {stats['success']}")
    logger.info(f"–û—à–∏–±–æ–∫: {stats['fail']}")
    logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time} —Å–µ–∫.")
    logger.info("–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ puzzle2_auto.py...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
