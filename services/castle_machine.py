# tg_zov/services/castle_machine.py
import json
import logging

from services.browser_patches import run_event_with_browser
from services.accounts_manager import get_all_accounts
from services.castle_api import load_cookies_for_account

BASE_URL = "https://event-cc.igg.com/event/castle_machine/"
MAKE_URL = f"{BASE_URL}ajax.req.php?action=make&type=free"
LOTTERY_URL = f"{BASE_URL}ajax.req.php?action=lottery"

logger = logging.getLogger("castle_machine")


def format_rewards(data: dict) -> str:
    """üß© –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞"""
    rewards = []
    for key in ("reward", "gift", "data", "list", "items", "item"):
        value = data.get(key)
        if isinstance(value, list):
            for i, r in enumerate(value, 1):
                if isinstance(r, dict):
                    name = r.get("name") or r.get("item_name") or r.get("title") or str(r)
                    cnt = r.get("count") or r.get("num") or 1
                    rewards.append(f"{i}. {name} √ó{cnt}")
                else:
                    rewards.append(f"{i}. {r}")
        elif isinstance(value, dict):
            for k, v in value.items():
                rewards.append(f"{k}: {v}")
        elif isinstance(value, str):
            rewards.append(value)

    if not rewards:
        return ""
    return "\nüéÅ " + "\nüéÅ ".join(rewards)


async def run_castle_machine(user_id: str, uid: str = None) -> dict:
    logger.info(f"[CASTLE_MACHINE] ‚ñ∂ –ó–∞–ø—É—Å–∫ –¥–ª—è user_id={user_id}, uid={uid}")

    """
    ‚öôÔ∏è –°–æ–±—ã—Ç–∏–µ '–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞'
    1Ô∏è‚É£ –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ (make&type=free)
    2Ô∏è‚É£ –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ (lottery)
    """
    accounts = get_all_accounts(user_id)
    if not accounts:
        return {"success": False, "message": "‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤."}

    acc = next((a for a in accounts if a.get("uid") == uid), accounts[0])
    uid = acc.get("uid")
    username = acc.get("username", "–ò–≥—Ä–æ–∫")

    cookies_dict = load_cookies_for_account(user_id, uid)
    if not cookies_dict:
        return {"success": False, "message": f"‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({username})."}
    logger.info(f"[CASTLE_MACHINE] üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {username} ({uid}) ‚Äî {len(cookies_dict)} —à—Ç.")

    async def handler(page):
        html = (await page.content()).lower()
        if any(x in html for x in ["—Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å", "—É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å"]):
            return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî —Å–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."}

        # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –ø–æ –¥–∞—Ç–∞–º ===
        try:
            from services.event_checker import check_event_active
            phase = await check_event_active("castle_machine")
            if phase == 1:
                logger.info(f"[CASTLE_MACHINE] üèó –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: 1 (–°–æ–∑–¥–∞–Ω–∏–µ)")
            elif phase == 2:
                logger.info(f"[CASTLE_MACHINE] üéÅ –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: 2 (–†–æ–∑—ã–≥—Ä—ã—à)")
            else:
                logger.warning(f"[CASTLE_MACHINE] ‚ö†Ô∏è –§–∞–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –∞–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
                return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî –∞–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –≤–Ω–µ –¥–∞—Ç—ã."}
        except Exception as e:
            logger.warning(f"[CASTLE_MACHINE] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ–∞–∑—ã: {e}")
            phase = None

        # --- –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–µ—Ä ---
        formatted_time = None
        try:
            timer_div = await page.query_selector("#count-down")
            if timer_div:
                timer_text = (await timer_div.inner_text() or "").strip()
                if timer_text and ":" in timer_text:
                    formatted_time = timer_text
                else:
                    left_attr = await timer_div.get_attribute("left_time")
                    if left_attr and left_attr.isdigit():
                        sec = int(left_attr)
                        h, m, s = sec // 3600, (sec % 3600) // 60, sec % 60
                        formatted_time = f"{h:02}:{m:02}:{s:02}"
            if formatted_time:
                logger.info(f"[CASTLE_MACHINE] –¢–∞–π–º–µ—Ä –Ω–∞–π–¥–µ–Ω: {formatted_time}")
            else:
                logger.info(f"[CASTLE_MACHINE] –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        except Exception:
            pass

        # --- –≠—Ç–∞–ø—ã ---
        stage_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try:
            times = await page.query_selector_all("div.event-time-group .event-time")
            if times:
                stage_info = [await t.inner_text() for t in times]
                stage_text = " / ".join([s.strip() for s in stage_info if s.strip()])
        except Exception:
            pass

        # === –í—ã–±–∏—Ä–∞–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã ===
        if phase == 1:
            action_url = MAKE_URL
            action_name = "make&type=free"
        elif phase == 2:
            action_url = LOTTERY_URL
            action_name = "lottery"
        else:
            return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî –∞–∫—Ü–∏—è –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∑."}

        logger.info(f"[CASTLE_MACHINE] ‚ñ∂ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å {action_name} –¥–ª—è {uid}")

        # === –í—ã–ø–æ–ª–Ω—è–µ–º fetch ===
        try:
            resp = await page.evaluate(
                f"""
                async () => {{
                    const res = await fetch("{action_url}", {{
                        method: "GET",
                        credentials: "include",
                        headers: {{ "X-Requested-With": "XMLHttpRequest" }}
                    }});
                    return await res.text();
                }}
                """
            )
        except Exception as e:
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {action_name}: {e}"}

        if not resp:
            return {"success": False, "message": f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç {action_name} ({username})."}

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
        try:
            data = json.loads(resp)
        except Exception:
            data = None

        # ‚úÖ –£—Å–ø–µ—Ö
        if data and str(data.get("status")) == "1":
            msg = data.get("msg") or "–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!"
            rewards_text = format_rewards(data)
            logger.info(f"[CASTLE_MACHINE] ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ {action_name} –¥–ª—è {uid}")
            return {
                "success": True,
                "message": (
                    f"‚úÖ <b>{username}</b> ({uid}) ‚Äî –∞–∫—Ü–∏—è <b>–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞</b>\n\n"
                    f"{msg}{rewards_text}\n\nüìÖ –≠—Ç–∞–ø—ã: {stage_text}"
                )
            }

        # ‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–æ–ø—É—â–µ–Ω –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        if data and data.get("error") == -3000 and data.get("status") == 0:
            logger.warning(f"[CASTLE_MACHINE] ‚ö†Ô∏è {username} ({uid}) ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è!")
            return {
                "success": True,
                "message": (
                    f"‚ö†Ô∏è <b>{username}</b> ({uid}) ‚Äî –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è üïí\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–π —Ñ–∞–∑–µ (—Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤ üéÅ).\n"
                    f"üìÖ –≠—Ç–∞–ø—ã: {stage_text}"
                )
            }

        # ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        snippet = str(resp).strip().replace("\n", " ")[:200]
        logger.warning(f"[CASTLE_MACHINE] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {snippet}")
        return {
            "success": False,
            "message": f"‚ö†Ô∏è <b>{username}</b> ({uid}) ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:\n<code>{snippet}</code>"
        }

    return await run_event_with_browser(user_id, uid, BASE_URL, "–°–æ–∑–¥–∞—é—â–∞—è –º–∞—à–∏–Ω–∞", handler)
