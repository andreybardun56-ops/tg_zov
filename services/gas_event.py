# tg_zov/services/gas_event.py
import json
import logging
from services.browser_patches import run_event_with_browser
from services.accounts_manager import get_all_accounts
from services.castle_api import load_cookies_for_account

logger = logging.getLogger("gas_event")

BASE_URL = "http://event-cc.igg.com/event/gas/"
API_URL = f"{BASE_URL}ajax.req.php?action=battlepower"


async def run_gas_event(user_id: str, uid: str = None) -> dict:
    """
    üß© –ê–∫—Ü–∏—è '–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å (gas)'
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–µ–Ω–æ' –∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É.
    """
    accounts = get_all_accounts(user_id)
    if not accounts:
        return {"success": False, "message": "‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤."}

    acc = next((a for a in accounts if a.get("uid") == uid), accounts[0])
    uid = acc.get("uid")
    username = acc.get("username", "–ò–≥—Ä–æ–∫")

    cookies_dict = load_cookies_for_account(user_id, uid)
    if not cookies_dict:
        return {"success": False, "message": f"‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({username})."}

    async def handler(page):
        # üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
        html = (await page.content()).lower()
        if any(x in html for x in ["—Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å", "—É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å"]):
            return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî —Å–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."}

        # üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–µ–Ω–æ"
        try:
            disable_btns = await page.locator(".gifts-get-btn.disable a").all_inner_texts()
            if any("–ü–æ–ª—É—á–µ–Ω–æ" in t for t in disable_btns):
                return {"success": True, "message": f"üü¢ {username} ({uid}) ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚úÖ"}
        except Exception:
            pass

        # üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        logger.info(f"[GAS] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è {username} ({uid})")
        try:
            resp = await page.evaluate(
                f"""
                async () => {{
                    const res = await fetch("{API_URL}", {{
                        method: "GET",
                        credentials: "include",
                        headers: {{
                            "X-Requested-With": "XMLHttpRequest"
                        }}
                    }});
                    return await res.text();
                }}
                """
            )
        except Exception as e:
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"}

        # üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        text = str(resp)
        if not text:
            return {"success": False, "message": f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({username})."}

        try:
            data = json.loads(text)
        except Exception:
            data = None

        if data:
            msg = (
                data.get("msg")
                or data.get("message")
                or (data.get("data", {}).get("msg") if isinstance(data.get("data"), dict) else None)
                or str(data)
            )
            msg = msg.strip()

            # ‚úÖ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
            if str(data.get("status")) in ["1", "true"] or str(data.get("code")) == "0":
                reward_text = msg.replace("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", "üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!").strip()
                return {
                    "success": True,
                    "message": f"üéâ <b>{username}</b> ({uid})\nüèÜ –ù–∞–≥—Ä–∞–¥–∞: {reward_text}"
                }

            # üü¢ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
            if any(word in msg.lower() for word in ["—É–∂–µ –ø–æ–ª—É—á", "–ø–æ–≤—Ç–æ—Ä", "already", "–ø–æ–ª—É—á–µ–Ω–∞"]):
                return {
                    "success": True,
                    "message": f"üü¢ <b>{username}</b> ({uid}) ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ"
                }

            # ‚ö†Ô∏è —Å–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            if "–Ω–µ –Ω–∞—á–∞–ª–æ—Å—å" in msg.lower() or "–∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å" in msg.lower():
                return {
                    "success": False,
                    "message": f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å ({username})."
                }

            return {"success": False, "message": f"‚ö†Ô∏è {username}: {msg}"}

        # –ï—Å–ª–∏ –Ω–µ JSON ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if any(x in text for x in ["–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º", "Success", "ÊàêÂäü", "–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏"]):
            snippet = text.strip().replace("\n", " ")[:150]
            return {"success": True, "message": f"üéâ <b>{username}</b> ({uid})\nüèÜ –ù–∞–≥—Ä–∞–¥–∞: {snippet}"}

        if "—Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å" in text or "—É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å" in text:
            return {"success": False, "message": f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å ({username})."}

        return {"success": False, "message": f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({username})."}

    return await run_event_with_browser(user_id, uid, BASE_URL, "–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–æ—â—å", handler)
