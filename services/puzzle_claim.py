# tg_zov/services/puzzle_claim.py
"""
üéÅ –í—ã–¥–∞—á–∞ 30 ec_param –∫–æ–¥–æ–≤ –≤—Ä—É—á–Ω—É—é (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "üéÅ –ü–æ–ª—É—á–∏—Ç—å 30 –ø–∞–∑–ª–æ–≤" –≤ start.py.
–ë–µ—Ä—ë—Ç 30 –ø–µ—Ä–≤—ã—Ö –∫–æ–¥–æ–≤ –∏–∑ puzzle_data.jsonl, —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∏
–ø–∏—à–µ—Ç –∑–∞–ø–∏—Å—å –≤ puzzle_claim.log.
"""

import os
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

logger = logging.getLogger("puzzle_claim")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PUZZLE_DATA_FILE = Path("data/puzzle_data.jsonl")
PUZZLE_CLAIM_LOG = Path("data/puzzle_claim.log")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _read_jsonl(path: Path) -> List[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç jsonl, –≥–¥–µ –∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî –æ–±—ä–µ–∫—Ç —Å ec_param –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."""
    if not path.exists():
        return []
    blocks = []
    buf = ""
    try:
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                if line.strip():
                    buf += line
                else:
                    if buf.strip():
                        try:
                            blocks.append(json.loads(buf))
                        except Exception:
                            pass
                        buf = ""
            if buf.strip():
                try:
                    blocks.append(json.loads(buf))
                except Exception:
                    pass
    except Exception as e:
        logger.warning(f"[PUZZLE_CLAIM] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")
    return blocks


def _write_jsonl(path: Path, blocks: List[Dict[str, Any]]):
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç puzzle_data.jsonl –∞—Ç–æ–º–∞—Ä–Ω–æ."""
    tmp = path.with_suffix(".tmp")
    with open(tmp, "w", encoding="utf-8") as f:
        for block in blocks:
            json.dump(block, f, ensure_ascii=False, indent=2)
            f.write("\n\n")
    os.replace(tmp, path)


def _append_log(user_id: int, count: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ –∫–æ–¥–æ–≤ –≤ puzzle_claim.log"""
    PUZZLE_CLAIM_LOG.parent.mkdir(parents=True, exist_ok=True)
    with open(PUZZLE_CLAIM_LOG, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now():%Y-%m-%d %H:%M:%S}] user_id={user_id} –ø–æ–ª—É—á–∏–ª {count} –∫–æ–¥–æ–≤\n")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def issue_puzzle_codes(user_id: int) -> List[str]:
    """
    –í—ã–¥–∞—ë—Ç 30 ec_param –∫–æ–¥–æ–≤, —É–¥–∞–ª—è—è –∏—Ö –∏–∑ puzzle_data.jsonl.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤.
    """
    if not PUZZLE_DATA_FILE.exists():
        logger.warning("[PUZZLE_CLAIM] –§–∞–π–ª puzzle_data.jsonl –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

    # 1Ô∏è‚É£ —á–∏—Ç–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
    blocks = _read_jsonl(PUZZLE_DATA_FILE)
    if not blocks:
        logger.info("[PUZZLE_CLAIM] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏.")
        return []

    # 2Ô∏è‚É£ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ec_param –∏–∑ –±–ª–æ–∫–æ–≤
    all_codes: List[str] = []
    for block in blocks:
        if isinstance(block, dict):
            code = block.get("ec_param")
            if code and isinstance(code, str):
                all_codes.append(code)

    # 3Ô∏è‚É£ –≤—ã–¥–∞—ë–º –ø–µ—Ä–≤—ã–µ 30
    selected = all_codes[:30]
    if not selected:
        return []

    # 4Ô∏è‚É£ —É–¥–∞–ª—è–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –∏–∑ blocks
    remaining_blocks = [
        b for b in blocks if b.get("ec_param") not in selected
    ]

    # 5Ô∏è‚É£ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        _write_jsonl(PUZZLE_DATA_FILE, remaining_blocks)
        logger.info(f"[PUZZLE_CLAIM] –£–¥–∞–ª–µ–Ω–æ {len(selected)} ec_param –∏–∑ puzzle_data.jsonl")
    except Exception as e:
        logger.error(f"[PUZZLE_CLAIM] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ puzzle_data.jsonl: {e}")

    # 6Ô∏è‚É£ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    _append_log(user_id, len(selected))

    return selected
