import json
import logging

from services.browser_patches import run_event_with_browser
from services.accounts_manager import get_all_accounts
from services.castle_api import load_cookies_for_account

BASE_URL = "https://event-eu-cc.igg.com/event/dragon_quest/"
ATTACK_URL = f"{BASE_URL}ajax.req.php?action=attack"

logger = logging.getLogger("dragon_quest")


def format_rewards(data: dict) -> str:
    """üéÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ `prizes`. –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–∏—à–µ—Ç '–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç'."""
    prizes = data.get("prizes")

    # –ò–Ω–æ–≥–¥–∞ prizes –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–æ –≤ data/prizes
    if not prizes and isinstance(data.get("data"), dict):
        prizes = data["data"].get("prizes")

    # üü° –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø–æ–ª—è –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
    if not prizes or prizes in ([], {}, "", None):
        return "\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç"

    lines = []
    if isinstance(prizes, list):
        for i, r in enumerate(prizes, 1):
            if isinstance(r, dict):
                name = (
                    r.get("name")
                    or r.get("item_name")
                    or r.get("title")
                    or r.get("desc")
                    or str(r)
                )
                cnt = r.get("count") or r.get("num") or 1
                lines.append(f"{i}. {name} √ó{cnt}")
            else:
                s = str(r).strip()
                if s:
                    lines.append(f"{i}. {s}")

    elif isinstance(prizes, dict):
        name = (
            prizes.get("name")
            or prizes.get("item_name")
            or prizes.get("title")
            or prizes.get("desc")
            or str(prizes)
        )
        cnt = prizes.get("count") or prizes.get("num") or 1
        lines.append(f"1. {name} √ó{cnt}")

    elif isinstance(prizes, str) and prizes.strip():
        lines.append(prizes.strip())

    # üü¢ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    if not lines:
        return "\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç"
    return "\nüéÅ " + "\nüéÅ ".join(lines)

async def run_dragon_quest(user_id: str, uid: str = None) -> dict:
    """
    ‚öîÔ∏è –°–æ–±—ã—Ç–∏–µ '–†—ã—Ü–∞—Ä–∏ –î—Ä–∞–∫–æ–Ω—ã'
    1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å attack
    3Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–µ—É–¥–∞—á–∏
    """
    logger.info(f"[DRAGON_QUEST] ‚ñ∂ –ó–∞–ø—É—Å–∫ –¥–ª—è user_id={user_id}, uid={uid}")

    accounts = get_all_accounts(user_id)
    if not accounts:
        return {"success": False, "message": "‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤."}

    acc = next((a for a in accounts if a.get("uid") == uid), accounts[0])
    uid = acc.get("uid")
    username = acc.get("username", "–ò–≥—Ä–æ–∫")

    cookies_dict = load_cookies_for_account(user_id, uid)
    if not cookies_dict:
        return {"success": False, "message": f"‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({username})."}
    logger.info(f"[DRAGON_QUEST] üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {username} ({uid}) ‚Äî {len(cookies_dict)} —à—Ç.")

    async def handler(page):
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è ---
        html = (await page.content()).lower()
        if any(x in html for x in ["—Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å", "—É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å"]):
            return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî —Å–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."}

        try:
            from services.event_checker import check_event_active
            active = await check_event_active("dragon_quest")
            if not active:
                logger.warning(f"[DRAGON_QUEST] ‚ö†Ô∏è –ê–∫—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –¥–∞–Ω–Ω—ã–º event_checker.")
                return {"success": True, "message": f"‚ö†Ô∏è {username} ({uid}) ‚Äî –∞–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."}
        except Exception as e:
            logger.warning(f"[DRAGON_QUEST] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

        # --- –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å ---
        logger.info(f"[DRAGON_QUEST] ‚öîÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å attack –¥–ª—è {uid}")
        try:
            resp = await page.evaluate(
                f"""
                async () => {{
                    const res = await fetch("{ATTACK_URL}", {{
                        method: "GET",
                        credentials: "include",
                        headers: {{ "X-Requested-With": "XMLHttpRequest" }}
                    }});
                    return await res.text();
                }}
                """
            )
        except Exception as e:
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ attack: {e}"}

        if not resp:
            return {"success": False, "message": f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç attack ({username})."}

        # --- –†–∞–∑–±–æ—Ä JSON-–æ—Ç–≤–µ—Ç–∞ ---
        try:
            data = json.loads(resp)
        except Exception:
            data = None

        # ‚úÖ –£—Å–ø–µ—Ö
        if data and str(data.get("status")) == "1":
            msg = data.get("msg") or "–ê—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            rewards_text = format_rewards(data)
            logger.info(f"[DRAGON_QUEST] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—Ç–∞–∫–∞ –¥–ª—è {uid}")
            return {
                "success": True,
                "message": (
                    f"‚öîÔ∏è <b>{username}</b> ({uid}) ‚Äî –∞–∫—Ü–∏—è <b>–†—ã—Ü–∞—Ä–∏ –î—Ä–∞–∫–æ–Ω—ã</b>\n\n"
                    f"{msg}{rewards_text}\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                )
            }

        # ‚ö†Ô∏è –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        if data == {"data": [], "error": 1, "status": 0}:
            logger.info(f"[DRAGON_QUEST] ‚öîÔ∏è –î–ª—è {uid} ‚Äî –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return {
                "success": True,
                "message": f"‚öîÔ∏è <b>{username}</b> ({uid}) ‚Äî –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–æ–±—ã—Ç–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
            }

        # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        snippet = str(resp).strip().replace("\n", " ")[:200]
        logger.warning(f"[DRAGON_QUEST] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {snippet}")
        return {
            "success": False,
            "message": f"‚ö†Ô∏è <b>{username}</b> ({uid}) ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:\n<code>{snippet}</code>"
        }

    return await run_event_with_browser(user_id, uid, BASE_URL, "–†—ã—Ü–∞—Ä–∏ –î—Ä–∞–∫–æ–Ω—ã", handler)
