# tg_zov/services/puzzle_claim_auto.py
import os
import json
import asyncio
import logging
import tempfile
import shutil
from pathlib import Path
from typing import Optional, Dict, Any, Tuple, List

from playwright.async_api import async_playwright
from services.logger import logger
from services.browser_patches import (
    get_random_browser_profile,
    humanize_pre_action,
    cookies_to_playwright,
    launch_masked_persistent_context,
)

# === –ü—É—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
COOKIES_FILE = Path("data/cookies.json")
PUZZLE_DATA_FILE = Path("data/puzzle_data.jsonl")
BROWSER_PATH = r".venv/Chrome/Application/chrome.exe"
EVENT_PAGE = "https://event-eu-cc.igg.com/event/puzzle2/"
EVENT_API = f"{EVENT_PAGE}ajax.req.php"
PROFILE_DIR = Path("data/chrome_profiles")
PROFILE_DIR.mkdir(parents=True, exist_ok=True)

log = logging.getLogger("puzzle_claim_auto")
log.setLevel(logging.INFO)

# ---------------- utilities ----------------
def load_cookies_file() -> dict:
    if not COOKIES_FILE.exists():
        return {}
    try:
        with open(COOKIES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.warning(f"[PUZZLE_CLAIM] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies.json: {e}")
        return {}

def save_cookies_file(data: dict):
    COOKIES_FILE.parent.mkdir(parents=True, exist_ok=True)
    tmp = COOKIES_FILE.with_suffix(".tmp")
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, COOKIES_FILE)

def parse_jsonl_blocks(path: Path) -> List[Dict[str, Any]]:
    if not path.exists():
        return []
    blocks, buf = [], ""
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            if line.strip():
                buf += line
            else:
                if buf.strip():
                    try:
                        blocks.append(json.loads(buf))
                    except Exception:
                        pass
                    buf = ""
        if buf.strip():
            try:
                blocks.append(json.loads(buf))
            except Exception:
                pass
    return blocks

def write_jsonl_blocks(path: Path, blocks: List[Dict[str, Any]]):
    tmp = path.with_suffix(".tmp")
    with open(tmp, "w", encoding="utf-8") as f:
        for b in blocks:
            json.dump(b, f, ensure_ascii=False, indent=2)
            f.write("\n\n")
    os.replace(tmp, path)

def find_donor_for_puzzle(puzzle_num: int) -> Optional[Tuple[Dict[str, Any], int]]:
    blocks = parse_jsonl_blocks(PUZZLE_DATA_FILE)
    for i, entry in enumerate(blocks):
        puzzle = entry.get("puzzle", {})
        if str(puzzle_num) in puzzle and int(puzzle[str(puzzle_num)]) > 0:
            return entry, i
    return None


def find_donor_for_puzzle_exclude(puzzle_num: int, exclude_iggids: set) -> Optional[
    Tuple[Dict[str, Any], int]]:
    """–ò—â–µ—Ç –¥–æ–Ω–æ—Ä–∞ –¥–ª—è –ø–∞–∑–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö."""
    blocks = parse_jsonl_blocks(PUZZLE_DATA_FILE)
    for i, entry in enumerate(blocks):
        iggid = entry.get("iggid")
        if iggid in exclude_iggids:
            continue
        puzzle = entry.get("puzzle", {})
        if str(puzzle_num) in puzzle and int(puzzle[str(puzzle_num)]) > 0:
            return entry, i
    return None


# ---------------- main logic ----------------
async def claim_puzzle(tg_user_id: str, target_iggid: str, puzzle_num: int, bot, msg=None) -> None:
    tg_user_id = str(tg_user_id)
    logger.info(f"[PUZZLE_CLAIM] üîç –ü–æ–∏—Å–∫ –ø–∞–∑–ª–∞ {puzzle_num} –¥–ª—è user={tg_user_id}")

    CLAIM_LOG_FILE = Path("data/puzzle_claim_log.json")

    # ===== –õ–û–ì =====
    def load_claim_log() -> dict:
        if CLAIM_LOG_FILE.exists():
            try:
                with open(CLAIM_LOG_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                return {}
        return {}

    def save_claim_log(data: dict):
        CLAIM_LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
        tmp = CLAIM_LOG_FILE.with_suffix(".tmp")
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, CLAIM_LOG_FILE)

    log_data = load_claim_log()

    # ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ =====
    user_entry = log_data.setdefault("users", {}).setdefault(tg_user_id, {}).setdefault(
        target_iggid, {"donors": [], "count": 0, "claimed_puzzles": [], "last_messages": {}}
    )

    # –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 30 –ø–∞–∑–ª–æ–≤
    if user_entry["count"] >= 30:
        await bot.send_message(
            tg_user_id,
            f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ 30 –ø–∞–∑–ª–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ <code>{target_iggid}</code> –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏.",
            parse_mode="HTML"
        )
        return

    donor_data = find_donor_for_puzzle(puzzle_num)
    if not donor_data:
        await bot.send_message(tg_user_id, f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–∞–∑–ª–∞ {puzzle_num}.")
        return

    donor, donor_index = donor_data
    donor_iggid = donor.get("iggid")
    if not donor_iggid:
        await bot.send_message(tg_user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —É –¥–æ–Ω–æ—Ä–∞ –Ω–µ—Ç IGGID.")
        return

    if donor_iggid in user_entry["donors"]:
        await bot.send_message(
            tg_user_id,
            f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø–∞–∑–ª –æ—Ç <code>{donor_iggid}</code> –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏.",
            parse_mode="HTML"
        )
        return

    cookies_db = load_cookies_file()
    user_cookies = cookies_db.get(tg_user_id, {})
    acc_cookies = user_cookies.get(str(target_iggid), {})
    if not acc_cookies:
        await bot.send_message(tg_user_id, "‚ö†Ô∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç cookies. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏ –∏—Ö.")
        return

  #  await bot.send_message(
  #      tg_user_id,
  #      f"üß© –ü–æ–ª—É—á–∞—é –ø–∞–∑–ª <b>{puzzle_num}</b> –æ—Ç <code>{donor_iggid}</code>...",
  #      parse_mode="HTML"
  #  )

    try:
        async with async_playwright() as p:
            profile = get_random_browser_profile()
            ctx = await launch_masked_persistent_context(
                p,
                user_data_dir=str(PROFILE_DIR / f"{target_iggid}"),
                browser_path=BROWSER_PATH,
                headless=True,
                slow_mo=50,
                profile=profile
            )
            context, page = ctx["context"], ctx["page"]

            # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É–∫–∏
            await context.add_cookies(cookies_to_playwright(acc_cookies))
            await page.goto(EVENT_PAGE, wait_until="domcontentloaded", timeout=30000)
            await asyncio.sleep(1.5)
            await humanize_pre_action(page)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏
            fresh = await context.cookies()
            fresh_map = {c["name"]: c["value"] for c in fresh if "name" in c}
            if fresh_map:
                cookies_db.setdefault(tg_user_id, {})[str(target_iggid)] = fresh_map
                save_cookies_file(cookies_db)

            # === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å ===
            claim_url = f"{EVENT_API}?action=claim_friend_puzzle&friend_iggid={donor_iggid}&puzzle={puzzle_num}"
            logger.info(f"[PUZZLE_CLAIM] üéØ –ó–∞–ø—Ä–æ—Å: {claim_url}")

            js = f"""
                async () => {{
                    const res = await fetch("{claim_url}", {{
                        method: 'GET',
                        credentials: 'include',
                        headers: {{
                            'X-Requested-With': 'XMLHttpRequest',
                            'Referer': '{EVENT_PAGE}'
                        }}
                    }});
                    const txt = await res.text();
                    return {{status: res.status, text: txt}};
                }}
            """
            resp = await page.evaluate(js)
            text = resp.get("text", "")
            status = resp.get("status", 0)
            logger.info(f"[PUZZLE_CLAIM] –û—Ç–≤–µ—Ç: {status} | {text[:200]}")

            # --- üîÅ –ü–µ—Ä–µ–±–æ—Ä –¥–æ–Ω–æ—Ä–æ–≤ ---
            max_attempts = 10
            attempt = 0
            success = False
            last_error = None
            used_donors = set(user_entry["donors"])

            while attempt < max_attempts:
                attempt += 1
                try:
                    parsed_json = json.loads(text)
                except Exception:
                    parsed_json = None

                if parsed_json and isinstance(parsed_json, dict):
                    if parsed_json.get("status") == 1:
                        success = True
                        break

                    elif parsed_json.get("error") == 4:
                        logger.info(f"[PUZZLE_CLAIM] ‚ö†Ô∏è –î–æ–Ω–æ—Ä {donor_iggid} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ...")
                        used_donors.add(donor_iggid)
                        user_entry["donors"].append(donor_iggid)
                        save_claim_log(log_data)

                        donor_data = find_donor_for_puzzle_exclude(puzzle_num, used_donors)
                        if not donor_data:
                            last_error = 4
                            break

                        donor, donor_index = donor_data
                        donor_iggid = donor.get("iggid")
                        logger.info(f"[PUZZLE_CLAIM] üîÅ –ü–æ–ø—ã—Ç–∫–∞ #{attempt} ‚Äî –Ω–æ–≤—ã–π –¥–æ–Ω–æ—Ä {donor_iggid}")

                        claim_url = f"{EVENT_API}?action=claim_friend_puzzle&friend_iggid={donor_iggid}&puzzle={puzzle_num}"
                        js = f"""
                            async () => {{
                                const res = await fetch("{claim_url}", {{
                                    method: 'GET',
                                    credentials: 'include',
                                    headers: {{
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'Referer': '{EVENT_PAGE}'
                                    }}
                                }});
                                const txt = await res.text();
                                return {{status: res.status, text: txt}};
                            }}
                        """
                        resp = await page.evaluate(js)
                        text = resp.get("text", "")
                        continue


                    elif parsed_json.get("error") == 5:

                        # ‚úÖ –ª–∏–º–∏—Ç 30 –ø–∞–∑–ª–æ–≤

                        logger.info(
                            f"[PUZZLE_CLAIM] üö´ –õ–∏–º–∏—Ç 30 –ø–∞–∑–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {target_iggid}. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é count=30.")

                        user_entry["count"] = 30

                        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π

                        if "last_messages" not in user_entry or not isinstance(user_entry["last_messages"], dict):
                            user_entry["last_messages"] = {}

                        save_claim_log(log_data)

                        last_error = 5

                        err_text = (

                            f"üö´ <b>–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!</b>\n"

                            f"–ê–∫–∫–∞—É–Ω—Ç <code>{target_iggid}</code> —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤—Å–µ 30 –ø–∞–∑–ª–æ–≤ –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏ üéØ.\n\n"

                            f"–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–æ–≤—ã–π –∏–≤–µ–Ω—Ç üß©"

                        )

                        # üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É

                        try:

                            msg_id = user_entry["last_messages"].get(str(puzzle_num))

                            if msg_id:

                                await bot.edit_message_text(

                                    chat_id=tg_user_id,

                                    message_id=msg_id,

                                    text=err_text,

                                    parse_mode="HTML"

                                )

                            else:
                                msg = await bot.send_message(tg_user_id, err_text, parse_mode="HTML")
                                user_entry["last_messages"][str(puzzle_num)] = msg.message_id
                                save_claim_log(log_data)
                        except Exception as e:
                            logger.warning(f"[PUZZLE_CLAIM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: {e}")
                        break
                    else:
                        last_error = parsed_json.get("error")
                        break

                else:
                    success = "success" in text.lower() or "Ëé∑Âæó" in text or "ÊàêÂäü" in text or "–ü–æ–∑–¥—Ä–∞–≤" in text
                    break

            # --- üìò –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
            if success:
                blocks = parse_jsonl_blocks(PUZZLE_DATA_FILE)
                if 0 <= donor_index < len(blocks):
                    puzzles = blocks[donor_index].get("puzzle", {})
                    count = int(puzzles.get(str(puzzle_num), 0))
                    if count > 1:
                        puzzles[str(puzzle_num)] = count - 1
                    else:
                        puzzles.pop(str(puzzle_num), None)
                    if not puzzles:
                        blocks.pop(donor_index)
                    else:
                        blocks[donor_index]["puzzle"] = puzzles
                    write_jsonl_blocks(PUZZLE_DATA_FILE, blocks)

                if donor_iggid not in user_entry["donors"]:
                    user_entry["donors"].append(donor_iggid)
                    user_entry["count"] += 1
                if puzzle_num not in user_entry.get("claimed_puzzles", []):
                    user_entry["claimed_puzzles"].append(puzzle_num)
                save_claim_log(log_data)

                remaining = 30 - user_entry["count"]
                puzzles_list = ", ".join(map(str, user_entry["claimed_puzzles"]))
                text_out = (
                    f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–∞–∑–ª—ã: <b>{puzzles_list}</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{remaining}</b> / 30"
                )
                # 1) –ê–ø–¥–µ–π—Ç–∏–º "—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
                if msg:
                    try:
                        await msg.edit_text(
                            f"‚úÖ –ü–∞–∑–ª <b>{puzzle_num}</b> –ø–æ–ª—É—á–µ–Ω –æ—Ç <code>{donor_iggid}</code>.",
                            parse_mode="HTML"
                        )
                    except Exception:
                        pass

                # 2) –ê–ø–¥–µ–π—Ç–∏–º/—Å–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–∫—É (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑)
                summary_id = user_entry["last_messages"].get("summary")
                if summary_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=tg_user_id,
                            message_id=summary_id,
                            text=text_out,
                            parse_mode="HTML"
                        )
                    except Exception:
                        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É–¥–∞–ª–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
                        m = await bot.send_message(tg_user_id, text_out, parse_mode="HTML")
                        user_entry["last_messages"]["summary"] = m.message_id
                        save_claim_log(log_data)
                else:
                    m = await bot.send_message(tg_user_id, text_out, parse_mode="HTML")
                    user_entry["last_messages"]["summary"] = m.message_id
                    save_claim_log(log_data)

                if remaining <= 0:
                    await bot.send_message(
                        tg_user_id,
                        "üö´ –í—Å–µ 30 –ø–∞–∑–ª–æ–≤ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã.\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
                        parse_mode="HTML"
                    )

            else:
                if last_error == 4:
                    err_text = f"‚ö†Ô∏è –í—Å–µ –¥–æ–Ω–æ—Ä—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø–∞–∑–ª–∞ {puzzle_num}."
                elif last_error == 5:
                    err_text = f"üö´ –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ <code>{target_iggid}</code> –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 30 –ø–∞–∑–ª–æ–≤."
                else:
                    err_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–∑–ª {puzzle_num}.\n<code>{text[:300]}</code>"
                if msg:
                    try:
                        await msg.edit_text(err_text, parse_mode="HTML")
                        return
                    except Exception:
                        pass

                msg_id = user_entry["last_messages"].get(str(puzzle_num))
                if msg_id:
                    await bot.edit_message_text(chat_id=tg_user_id, message_id=msg_id, text=err_text, parse_mode="HTML")
                else:
                    msg = await bot.send_message(tg_user_id, err_text, parse_mode="HTML")
                    user_entry["last_messages"][str(puzzle_num)] = msg.message_id
                    save_claim_log(log_data)

    except Exception as e:
        logger.exception(f"[PUZZLE_CLAIM] –û—à–∏–±–∫–∞ claim_puzzle: {e}")
        await bot.send_message(tg_user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    finally:
        try:
            if 'page' in locals():
                await page.close()
            if 'context' in locals():
                await context.close()
        except Exception:
            pass

# ---------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è Puzzle2 ----------------
async def check_puzzle2_active(user_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–∫—Ü–∏—è ¬´–ü–∞–∑–ª—ã¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã Puzzle2.
    """
    from services.cookies_io import load_all_cookies

    EVENT_URL = "https://event-eu-cc.igg.com/event/puzzle2/"
    user_id = str(user_id)
    cookies_db = load_all_cookies()
    user_cookies = cookies_db.get(user_id, {})

    if not user_cookies:
        logger.warning(f"[puzzle_check] ‚ö†Ô∏è –ù–µ—Ç cookies –¥–ª—è user_id={user_id}")
        return False

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π UID
    first_uid = next(iter(user_cookies.keys()))
    acc_cookies = user_cookies.get(first_uid, {})
    if not acc_cookies:
        logger.warning(f"[puzzle_check] ‚ö†Ô∏è –ù–µ—Ç cookies –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {first_uid}")
        return False

    async with async_playwright() as p:
        ctx_info = await launch_masked_persistent_context(
            p,
            user_data_dir=str(PROFILE_DIR / first_uid),
            browser_path=BROWSER_PATH,
            headless=True,
            slow_mo=30,
            profile=get_random_browser_profile(),
        )
        context, page = ctx_info["context"], ctx_info["page"]

        try:
            await context.add_cookies(cookies_to_playwright(acc_cookies))
            await page.goto(EVENT_URL, wait_until="domcontentloaded", timeout=30000)
            await asyncio.sleep(1)

            current_url = page.url.lower()
            html = await page.content()

            # üí° –ù–æ–≤–∞—è ‚Äî –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
            active_markers = [
                "ajax.req.php",
                "puzzle",  # —á–∞—Å—Ç—å ID/–∫–ª–∞—Å—Å–æ–≤
                "gift-details-it",
                "puzzle2_main",
                "event/puzzle2/ajax.req.php",
            ]
            is_active = any(marker in html for marker in active_markers)

            if "puzzle2" in current_url and is_active:
                logger.info(f"[puzzle_check] ‚úÖ –ê–∫—Ü–∏—è Puzzle2 –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {user_id}")
                return True
            else:
                logger.warning(f"[puzzle_check] ‚ö†Ô∏è –ê–∫—Ü–∏—è Puzzle2 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (url={current_url})")
                return False

        except Exception as e:
            logger.warning(f"[puzzle_check] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Puzzle2: {e}")
            return False

        finally:
            try:
                await page.close()
                await context.close()
            except Exception:
                pass
