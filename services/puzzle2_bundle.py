# tg_zov/services/puzzle2_bundle.py
import asyncio
import logging

from services.farm_puzzles_auto import run_farm_puzzles_for_all
from services import puzzle2_auto  # —ç—Ç–æ —Ç–≤–æ–π —Ñ–∞–π–ª services/puzzle2_auto.py

logger = logging.getLogger("puzzle2_bundle")

async def run_puzzle2_all_sources(user_id=None, uid=None, bot=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–±–æ—Ä–∞ –ø–∞–∑–ª–æ–≤:
    1) run_farm_puzzles_for_all (–∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞)
    2) puzzle2_auto.main() (–∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ new_data*.json)

    user_id/uid –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è puzzle2_auto, –Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è run_farm_puzzles_for_all.
    """
    results = []

    # ‚îÄ‚îÄ 1) –±–∞–∑—ã –±–æ—Ç–∞
    try:
        logger.info("üß© [bundle] –ó–∞–ø—É—Å–∫ run_farm_puzzles_for_all (–±–∞–∑–∞ –±–æ—Ç–∞)")
        r1 = await run_farm_puzzles_for_all(bot)
        results.append(("farm_puzzles_for_all", True, r1.get("message", "OK")))
    except Exception as e:
        logger.exception("‚ùå [bundle] –û—à–∏–±–∫–∞ run_farm_puzzles_for_all: %s", e)
        results.append(("farm_puzzles_for_all", False, f"–û—à–∏–±–∫–∞: {e}"))

    # ‚îÄ‚îÄ 2) new_data*.json (–≥–ª–æ–±–∞–ª—å–Ω–æ, –¥–ª—è –≤—Å–µ—Ö —Ç–∞–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
    try:
        logger.info("üß© [bundle] –ó–∞–ø—É—Å–∫ puzzle2_auto.main() (new_data*.json)")
        await puzzle2_auto.main()
        results.append(("puzzle2_auto", True, "puzzle2_auto –∑–∞–≤–µ—Ä—à—ë–Ω"))
    except Exception as e:
        logger.exception("‚ùå [bundle] –û—à–∏–±–∫–∞ puzzle2_auto.main(): %s", e)
        results.append(("puzzle2_auto", False, f"–û—à–∏–±–∫–∞: {e}"))

    # –ò—Ç–æ–≥
    ok = all(s for _, s, _ in results)
    txt = "\n".join([f"{'‚úÖ' if s else '‚ö†Ô∏è'} {name}: {msg}" for name, s, msg in results])
    return {"success": ok, "message": txt}
