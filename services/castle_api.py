# tg_zov/services/castle_api.py
import asyncio
import re
import json
import os
from typing import Any
from playwright.async_api import TimeoutError as PlaywrightTimeout
from services.logger import logger
from services.browser_patches import (
    launch_masked_persistent_context,
    get_random_browser_profile,
)
from services.cookies_io import load_all_cookies, save_all_cookies
from config import COOKIES_FILE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß± –†–∞–±–æ—Ç–∞ —Å cookies.json
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_cookies_for_account(user_id: str, uid: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç cookies –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ cookies.json"""
    if not os.path.exists(COOKIES_FILE):
        logger.warning("[COOKIES] ‚ö†Ô∏è –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    try:
        with open(COOKIES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(str(user_id), {}).get(str(uid), {})
    except Exception as e:
        logger.error(f"[COOKIES] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
        return {}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies —á–µ—Ä–µ–∑ MVP (—á–µ—Ä–µ–∑ browser_patches)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def refresh_cookies_mvp(user_id: str, uid: str) -> dict[str, Any]:
    """
    üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç cookies —á–µ—Ä–µ–∑ MVP-—Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è browser_patches.
    """
    from .accounts_manager import get_all_accounts

    logger.info(f"[COOKIES] üåê –û–±–Ω–æ–≤–ª—è—é cookies –¥–ª—è UID={uid} (user_id={user_id})")

    accounts = get_all_accounts(str(user_id))
    acc = next((a for a in accounts if a.get("uid") == uid), None)
    if not acc or not acc.get("mvp_url"):
        return {"success": False, "error": "MVP —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ."}

    mvp_url = acc["mvp_url"]
    cookies_result: dict[str, str] = {}
    ctx = None

    try:
        from playwright.async_api import async_playwright
        async with async_playwright() as p:
            profile = get_random_browser_profile()
            ctx = await launch_masked_persistent_context(
                p,
                user_data_dir=f"data/chrome_profiles/{uid}",
                headless=True,
                slow_mo=30,
                profile=profile,
            )

            context = ctx["context"]
            page = ctx["page"]

            await page.goto(mvp_url, wait_until="domcontentloaded", timeout=60000)
            logger.info("[COOKIES] üåç –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ MVP")

            # ‚úÖ –ö–Ω–æ–ø–∫–∞ "Accept all"
            try:
                try:
                    await page.click('div.i-cookie__btn[data-value="all"]', timeout=8000)
                    logger.info("[COOKIES] ‚úÖ –ù–∞–∂–∞—Ç–∞ 'Accept all' (div.i-cookie__btn)")
                except PlaywrightTimeout:
                    await page.click("text=Accept all", timeout=3000)
                    logger.info("[COOKIES] ‚úÖ –ù–∞–∂–∞—Ç–∞ 'Accept all' (–ø–æ —Ç–µ–∫—Å—Ç—É)")
                await asyncio.sleep(1.5)
            except Exception:
                logger.info("[COOKIES] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'Accept all' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –±–∞–Ω–Ω–µ—Ä–∞ –Ω–µ—Ç")

            # üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
            cookies_list = await context.cookies()
            cookies_result = {c["name"]: c["value"] for c in cookies_list}

            all_data = load_all_cookies()
            all_data.setdefault(str(user_id), {})[str(uid)] = cookies_result
            save_all_cookies(all_data)

            logger.info(f"[COOKIES] üíæ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è UID={uid}")
            return {"success": True, "cookies": cookies_result}

    except Exception as e:
        logger.exception(f"[COOKIES] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies: {e}")
        return {"success": False, "error": str(e)}

    finally:
        try:
            if ctx:
                if "page" in ctx:
                    await ctx["page"].close()
                if "context" in ctx:
                    await ctx["context"].close()
        except Exception:
            pass

    return {"success": False, "error": "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üéÅ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def extract_reward_from_response(text: str) -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ JSON –∏–ª–∏ HTML."""
    try:
        data = json.loads(text)
        for key in ["reward", "reward_name", "item_name", "name", "desc", "title", "msg"]:
            if key in data and isinstance(data[key], str):
                return data[key]
        if "data" in data and isinstance(data["data"], dict):
            for key in ["reward", "reward_name", "item_name", "name", "msg"]:
                if key in data["data"]:
                    return str(data["data"][key])
    except Exception:
        pass

    match = re.search(r'Â•ñÂä±[:Ôºö ]*([^"<>{}\n\r]+)', text)
    if match:
        return match.group(1).strip()

    match2 = re.search(r'"reward"\s*:\s*"([^"]+)"', text)
    if match2:
        return match2.group(1).strip()

    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üåê –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IGG ID –∏ –∏–º–µ–Ω–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã MVP (—á–µ—Ä–µ–∑ browser_patches)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def extract_player_info_from_page(url: str) -> dict:
    """
    üåê –û—Ç–∫—Ä—ã–≤–∞–µ—Ç MVP —Å—Å—ã–ª–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç IGG ID + –∏–º—è –∏–≥—Ä–æ–∫–∞ (—á–µ—Ä–µ–∑ browser_patches).
    """
    logger.info(f"[MVP] üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {url}")
    result = {"uid": None, "username": None}

    from playwright.async_api import async_playwright
    try:
        async with async_playwright() as p:
            profile = get_random_browser_profile()
            ctx = await launch_masked_persistent_context(
                p,
                user_data_dir="data/chrome_profiles/_extract_tmp",
                headless=True,
                slow_mo=30,
                profile=profile,
            )
            context = ctx["context"]
            page = ctx["page"]

            await page.goto(url, wait_until="domcontentloaded", timeout=60000)
            logger.info("[MVP] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

            try:
                await page.click('div.i-cookie__btn[data-value="all"]', timeout=5000)
                logger.info("[MVP] ‚úÖ –ö–Ω–æ–ø–∫–∞ 'Accept All' –Ω–∞–∂–∞—Ç–∞")
                await page.wait_for_timeout(1500)
            except Exception:
                logger.info("[MVP] ‚ö†Ô∏è –ë–∞–Ω–Ω–µ—Ä cookies –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

            await page.wait_for_selector(".user__infos-item", timeout=45000)
            blocks = await page.query_selector_all(".user__infos-item")

            for b in blocks:
                text = (await b.inner_text()).strip()
                if "IGG ID" in text:
                    match = re.search(r"\b\d{6,12}\b", text)
                    if match:
                        result["uid"] = match.group(0)
                elif "–ò–º—è –∏–≥—Ä–æ–∫–∞" in text:
                    match = re.search(r"–ò–º—è –∏–≥—Ä–æ–∫–∞[:Ôºö]?\s*(.+)", text)
                    if match:
                        result["username"] = match.group(1).strip()

            if result["uid"] and result["username"]:
                logger.info(f"[MVP] ‚úÖ –ù–∞–π–¥–µ–Ω IGG ID={result['uid']}, username={result['username']}")
                return {"success": True, **result}

            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IGG ID –∏–ª–∏ –∏–º—è"}

    except Exception as e:
        logger.error(f"[MVP] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return {"success": False, "error": str(e)}

    finally:
        try:
            if "page" in locals():
                await page.close()
            if "context" in locals():
                await context.close()
        except Exception:
            pass
