# tg_zov/services/recall2_auto.py
import asyncio
import json
import logging
import random
from pathlib import Path
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
from services.browser_patches import (
    get_random_browser_profile,
    launch_masked_persistent_context,
    cookies_to_playwright,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logger = logging.getLogger("recall2_auto")
logger.setLevel(logging.INFO)

DATA_FILE = Path("data/data_akk/new_data0.json")
PROFILE_DIR = Path("data/chrome_profiles/recall2")
PROFILE_DIR.mkdir(parents=True, exist_ok=True)
RESULT_FILE = Path("data/recall2_results.json")
RAW_DIR = Path("data/recall2_raw")   # –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
RAW_DIR.mkdir(parents=True, exist_ok=True)

BASE_URL = "https://event-eu-cc.igg.com/event/recall2/"
CODE = "F76CDD0B"  # —Ç–≤–æ–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
FULL_URL = f"{BASE_URL}?code={CODE}"
AJAX_URL = f"{BASE_URL}ajax.req.php?action=init&code={CODE}"

MAX_ATTEMPTS = 3
DELAY_BETWEEN = (1.0, 2.0)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß© –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_accounts() -> list[tuple[str, dict]]:
    if not DATA_FILE.exists():
        logger.error(f"‚ö†Ô∏è –§–∞–π–ª {DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        accs = []
        for entry in data:
            if not isinstance(entry, dict):
                continue
            for key, val in entry.items():
                if key.lower() in ("mail", "paswd"):
                    continue
                if isinstance(val, dict) and "PHPSESSID" in val:
                    accs.append((key, val))
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accs)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {DATA_FILE.name}")
        return accs
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
        return []

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Recall2
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_account(p, uid: str, cookies_dict: dict) -> tuple[str, str]:
    """
    –û–¥–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è: –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ action=init.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary_msg, raw_response_path)
    """
    for attempt in range(1, MAX_ATTEMPTS + 1):
        try:
            ctx = await launch_masked_persistent_context(
                p,
                user_data_dir=str(PROFILE_DIR / f"{uid}_recall"),
                headless=True,
                slow_mo=25,
                profile=get_random_browser_profile(),
            )
            context, page = ctx["context"], ctx["page"]

            # üç™ –î–æ–±–∞–≤–ª—è–µ–º cookies
            try:
                await context.add_cookies(cookies_to_playwright(cookies_dict))
            except Exception as e:
                logger.warning(f"[recall2] ‚ö†Ô∏è {uid}: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å cookies ({e})")
                try:
                    await context.close()
                except Exception:
                    pass
                return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ cookies", ""

            # üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(FULL_URL, wait_until="domcontentloaded", timeout=45000)
            await asyncio.sleep(random.uniform(2, 4))

            # üì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–∞–º –±—Ä–∞—É–∑–µ—Ä (fetch)
            js_code = f"""
                async () => {{
                    try {{
                        const res = await fetch("{AJAX_URL}", {{
                            method: "GET",
                            credentials: "include",
                            headers: {{
                                "X-Requested-With": "XMLHttpRequest",
                            }},
                        }});
                        const text = await res.text();
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç–µ, —á—Ç–æ–±—ã JS-–æ—à–∏–±–∫–∏ –±—ã–ª–∏ –≤–∏–¥–∏–º—ã
                        return JSON.stringify({{
                            status: res.status,
                            body: text
                        }});
                    }} catch (e) {{
                        return JSON.stringify({{error: String(e)}});
                    }}
                }}
            """
            try:
                eval_result = await page.evaluate(js_code)
            except Exception as e:
                eval_result = json.dumps({"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch: {e}"})

            # eval_result ‚Äî —Å—Ç—Ä–æ–∫–∞ JSON; –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            raw_text = ""
            try:
                parsed = json.loads(eval_result)
                if "error" in parsed:
                    raw_text = f"JS error: {parsed.get('error')}"
                else:
                    # –∑–¥–µ—Å—å parsed['body'] ‚Äî —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (HTML –∏–ª–∏ JSON)
                    raw_text = parsed.get("body", "")
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å —Ç–æ–∂–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    http_status = parsed.get("status")
            except Exception:
                # –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö evaluate –≤–µ—Ä–Ω—ë—Ç –ø—Ä–æ—Å—Ç–æ plain text
                raw_text = str(eval_result)
                http_status = None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
            raw_file = RAW_DIR / f"{uid}.txt"
            try:
                raw_file.write_text(raw_text, encoding="utf-8")
                logger.debug(f"[recall2] {uid}: raw –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {raw_file}")
            except Exception as e:
                logger.warning(f"[recall2] {uid}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å raw –æ—Ç–≤–µ—Ç: {e}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ —ç—Ç–æ JSON)
            summary_msg = ""
            try:
                maybe_json = json.loads(raw_text)
                status = str(maybe_json.get("status", "")) if isinstance(maybe_json, dict) else ""
                m = maybe_json.get("msg", "") if isinstance(maybe_json, dict) else ""
                if status == "1":
                    summary_msg = f"‚úÖ {uid}: {m or '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ'}"
                elif isinstance(m, str) and "already" in m.lower():
                    summary_msg = f"üîπ {uid}: –£–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω"
                elif isinstance(m, str) and ("not yet" in m.lower() or "coming soon" in m.lower()):
                    summary_msg = f"‚ö†Ô∏è {uid}: –°–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å"
                else:
                    summary_msg = f"‚ùì {uid}: {m or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç'}"
            except Exception:
                # –Ω–µ JSON ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ HTML/—Ç–µ–∫—Å—Ç—É
                lowered = (raw_text or "").lower()
                if "access denied" in lowered or "forbidden" in lowered:
                    summary_msg = f"‚ö†Ô∏è {uid}: Access Denied / –Ω–µ—Ç –ø—Ä–∞–≤"
                elif "already been invited" in lowered or "already invited" in lowered:
                    summary_msg = f"üîπ {uid}: –£–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω"
                elif "thank you" in lowered or "reward" in lowered or "successfully" in lowered:
                    summary_msg = f"‚úÖ {uid}: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ (–ø–æ —Ç–µ–∫—Å—Ç—É)"
                elif "not yet" in lowered or "event has not yet begun" in lowered or "coming soon" in lowered:
                    summary_msg = f"‚ö†Ô∏è {uid}: –°–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å"
                else:
                    snippet = (raw_text or "")[:200].replace("\n", " ")
                    summary_msg = f"‚ùì {uid}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–º. —Ñ–∞–π–ª): {snippet}"

            logger.info(f"[recall2_playwright] {summary_msg}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            try:
                await page.close()
            except Exception:
                pass
            try:
                await context.close()
            except Exception:
                pass

            return summary_msg, str(raw_file)

        except PlaywrightTimeoutError:
            logger.warning(f"[recall2] ‚ö†Ô∏è {uid}: —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
        except Exception as e:
            logger.warning(f"[recall2] ‚ö†Ô∏è {uid}: –æ—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
        await asyncio.sleep(1.5 + attempt * 0.5)

    logger.error(f"[recall2] ‚ùå {uid}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫")
    return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", ""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def run_recall2():
    accounts = load_accounts()
    if not accounts:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Recall2.")
        return

    results = {}
    async with async_playwright() as p:
        for idx, (uid, cookies_dict) in enumerate(accounts, start=1):
            logger.info(f"üîπ [{idx}/{len(accounts)}] –ê–∫–∫–∞—É–Ω—Ç {uid} ‚Äî –≤—ã–ø–æ–ª–Ω—è—é Recall2")
            try:
                summary, raw_path = await handle_account(p, uid, cookies_dict)
                results[uid] = {"summary": summary, "raw_file": raw_path}
            except Exception as e:
                logger.error(f"[recall2] ‚ùå {uid}: {e}")
                results[uid] = {"summary": f"–û—à–∏–±–∫–∞: {e}", "raw_file": ""}
            await asyncio.sleep(random.uniform(*DELAY_BETWEEN))

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        RESULT_FILE.parent.mkdir(parents=True, exist_ok=True)
        with open(RESULT_FILE, "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ Recall2 –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {RESULT_FILE.name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üí° –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    asyncio.run(run_recall2())
