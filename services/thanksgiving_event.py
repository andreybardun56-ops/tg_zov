# tg_zov/services/thanksgiving_event.py
import asyncio
import json
import logging
import aiohttp
from datetime import datetime

from services.browser_patches import run_event_with_browser
from services.accounts_manager import get_all_accounts
from services.castle_api import load_cookies_for_account

logger = logging.getLogger("thanksgiving_event")
from pathlib import Path

STATE_FILE = Path("data/thanksgiving_state.json")

def load_state():
    if STATE_FILE.exists():
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_state(state: dict):
    STATE_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

BASE_URL = "https://event-cc.igg.com/event/thanksgiving_time/"
API_URL = f"{BASE_URL}ajax.req.php?apid="

# üéÅ ID –Ω–∞–≥—Ä–∞–¥
ACHIEVE_IDS = ["achieve-6", "achieve-12", "achieve-18", "achieve-24"]
NORMAL_IDS = [f"normal-{i}" for i in range(1, 25)]


async def run_thanksgiving_event(user_id: str, uid: str = None) -> dict:
    """
    üéâ –ê–∫—Ü–∏—è "10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤"
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è, –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.
    """
    accounts = get_all_accounts(user_id)
    if not accounts:
        return {"success": False, "message": "‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤."}

    acc = next((a for a in accounts if a.get("uid") == uid), accounts[0])
    uid = acc.get("uid")
    username = acc.get("username", "–ò–≥—Ä–æ–∫")

    # üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–±–æ—Ä–∞–º–∏
    state = load_state()
    uid_state = state.get(str(uid), {})
    last_claim = uid_state.get("last_claim")
    now = datetime.utcnow()

    if last_claim:
        try:
            dt = datetime.fromisoformat(last_claim)
            if (now - dt).total_seconds() < 12 * 3600:
                remaining = int(12 * 3600 - (now - dt).total_seconds()) // 60
                return {
                    "success": True,
                    "message": f"‚è∏ <b>{username}</b> ({uid}) ‚Äî –Ω–∞–≥—Ä–∞–¥—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ.\n"
                               f"–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω."
                }
        except Exception:
            pass

    cookies_dict = load_cookies_for_account(user_id, uid)
    if not cookies_dict:
        return {"success": False, "message": f"‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({username})."}

    async def handler(page):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π."""
        try:
            html = (await page.content()).lower()

            # üïì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è
            if any(x in html for x in ["—Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å", "—É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å"]):
                return {
                    "success": True,
                    "message": f"‚ö†Ô∏è <b>{username}</b> ({uid}) ‚Äî —Å–æ–±—ã—Ç–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."
                }

            # üìÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
            event_period = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                elem = await page.query_selector("div.chance span.event-time")
                if elem:
                    event_period = (await elem.inner_text()).strip()
            except Exception:
                pass

            # üïí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            current_day = datetime.utcnow().day
            logger.info(f"[thanksgiving_event] {username} ({uid}) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è: {current_day}")

            # --- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ ---
            cookies = {name: value for name, value in cookies_dict.items()}
            headers = {
                "User-Agent": "Mozilla/5.0",
                "Referer": BASE_URL,
                "X-Requested-With": "XMLHttpRequest",
                "Accept": "application/json, text/javascript, */*; q=0.01",
            }

            rewards_normal, rewards_achieve = [], []

            async with aiohttp.ClientSession(headers=headers, cookies=cookies) as session:
                async def claim(apid: str):
                    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã."""
                    try:
                        async with session.get(f"{API_URL}{apid}", timeout=15) as resp:
                            text = await resp.text()
                            try:
                                data = json.loads(text)
                            except Exception:
                                data = None

                            if not data:
                                return False, f"‚ö†Ô∏è {apid}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"

                            status = str(data.get("status"))
                            msg = data.get("msg") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"

                            # üéØ –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
                            if status == "1":
                                return True, f"‚úÖ {apid}: {msg}"
                            elif status == "0":
                                if any(w in msg.lower() for w in ["—á–µ—Ä–µ–∑", "–ø–æ–∑–∂–µ", "hours", "hour", "–µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]):
                                    return None, f"‚è∏Ô∏è {apid}: {msg}"
                                elif any(w in msg.lower() for w in ["—É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞", "already claimed"]):
                                    return False, f"üîπ {apid}: —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞"
                                return True, f"üü¢ {apid}: {msg}"
                            return False, f"‚ö†Ô∏è {apid}: {text[:120]}"
                    except Exception as e:
                        return False, f"‚ùå {apid}: –æ—à–∏–±–∫–∞ {e}"

                # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã ---
                logger.info(f"[thanksgiving_event] {username} ({uid}) ‚Äî –Ω–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –æ–±—ã—á–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥")
                for apid in NORMAL_IDS:
                    result, msg = await claim(apid)
                    rewards_normal.append(msg)
                    if result is None:  # –Ω–∞–≥—Ä–∞–¥–∞ –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                        rewards_normal.append("‚è∏Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ (–≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤).")
                        break
                    await asyncio.sleep(0.5)

                # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã ---
                logger.info(f"[thanksgiving_event] {username} ({uid}) ‚Äî –Ω–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –±–æ–Ω—É—Å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥")
                for apid in ACHIEVE_IDS:
                    _, msg = await claim(apid)
                    rewards_achieve.append(msg)
                    await asyncio.sleep(0.5)

            # üßæ –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥
            summary = (
                f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {event_period}\n\n"
                f"üì¶ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</b>\n" + "\n".join(rewards_normal) +
                "\n\nüéØ <b>–ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</b>\n" + "\n".join(rewards_achieve)
            )

            msg = (
                f"üéâ <b>{username}</b> ({uid}) ‚Äî –∞–∫—Ü–∏—è <b>10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤</b>\n\n"
                f"{summary}\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            )

            # üïí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±–æ—Ä–∞
            state[str(uid)] = {
                "last_claim": datetime.utcnow().isoformat(),
                "collected": state.get(str(uid), {}).get("collected", 0) + 1
            }
            save_state(state)

            return {"success": True, "message": msg}

        except Exception as e:
            logger.exception(f"[thanksgiving_event] ‚ùå –û—à–∏–±–∫–∞ –≤ handler: {e}")
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"}

    # üß† –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ browser_patches
    return await run_event_with_browser(user_id, uid, BASE_URL, "10 –¥–Ω–µ–π –ø—Ä–∏–∑–æ–≤", handler)
