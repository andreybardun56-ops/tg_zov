# tg_zov/services/promo_code.py
import asyncio
import json
import os
import logging
from datetime import datetime

from services.browser_patches import run_event_with_browser
from services.accounts_manager import get_all_accounts, load_all_users
from services.castle_api import load_cookies_for_account

logger = logging.getLogger("promo_code")

PROMO_HISTORY_FILE = "data/promo_history.json"
CDKEY_URL = "https://event-cc.igg.com/event/cdkey/ajax.req.php?lang=de&iggid={uid}&cdkey={code}"


# ----------------------------- üíæ –ò—Å—Ç–æ—Ä–∏—è -----------------------------
def load_promo_history() -> list:
    if not os.path.exists(PROMO_HISTORY_FILE):
        return []
    try:
        with open(PROMO_HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


def save_promo_history(history: list):
    os.makedirs(os.path.dirname(PROMO_HISTORY_FILE), exist_ok=True)
    with open(PROMO_HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


# ----------------------------- üß© –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ -----------------------------
async def activate_promo_for_account(page, uid: str, username: str, code: str) -> str:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    url = CDKEY_URL.format(uid=uid, code=code)
    try:
        await page.goto(url, wait_until="domcontentloaded", timeout=20000)
        await asyncio.sleep(2)

        text = await page.content()
        lower = text.lower()

        if any(w in lower for w in ["—É—Å–ø–µ—à–Ω–æ", "success", "ÊàêÂäü"]):
            return f"‚úÖ <b>{username}</b> ({uid}): –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        elif any(w in lower for w in ["already", "Â∑≤‰ΩøÁî®", "—É–∂–µ –∏—Å–ø–æ–ª—å–∑"]):
            return f"‚ö†Ô∏è <b>{username}</b> ({uid}): –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
        elif any(w in lower for w in ["invalid", "ÁÑ°Êïà", "–Ω–µ–≤–µ—Ä–Ω—ã–π", "–æ—à–∏–±–∫–∞"]):
            return f"‚ùå <b>{username}</b> ({uid}): –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥."
        else:
            snippet = text.strip().replace("\n", " ")[:120]
            return f"‚ö†Ô∏è <b>{username}</b> ({uid}): –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî <code>{snippet}</code>"

    except Exception as e:
        return f"‚ùå <b>{username}</b> ({uid}): –û—à–∏–±–∫–∞ {e}"


# ----------------------------- üöÄ –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è -----------------------------
async def run_promo_code(code: str) -> dict:
    """
    üéÅ –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å user_id -> [—Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π].
    """
    logger.info(f"[PROMO] üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞: {code}")
    all_users = load_all_users()
    results = {}
    history = load_promo_history()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã
    if any(entry.get("code") == code for entry in history):
        logger.warning(f"[PROMO] ‚ö†Ô∏è –ö–æ–¥ {code} —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return {"error": f"‚ö†Ô∏è –ö–æ–¥ {code} —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ."}

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def handle_user(user_id: str, accounts: list):
        user_results = []
        for acc in accounts:
            uid = acc.get("uid")
            username = acc.get("username", "–ò–≥—Ä–æ–∫")
            if not uid:
                continue

            cookies_dict = load_cookies_for_account(user_id, uid)
            if not cookies_dict:
                user_results.append(f"‚ö†Ô∏è <b>{username}</b> ({uid}): Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                continue

            async def handler(page):
                return await activate_promo_for_account(page, uid, username, code)

            result = await run_event_with_browser(user_id, uid, CDKEY_URL.format(uid=uid, code=code), f"–ü—Ä–æ–º–æ–∫–æ–¥ {code}", handler)
            msg = result.get("message") if isinstance(result, dict) else str(result)
            user_results.append(msg)
            await asyncio.sleep(0.5)
        return user_results

    # üöÄ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id, accounts in all_users.items():
        results[user_id] = await handle_user(user_id, accounts)
        await asyncio.sleep(1)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if any("–£—Å–ø–µ—à–Ω–æ" in " ".join(v) for v in results.values()):
        save_promo_history(history)

    history.append({
        "code": code,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "results": results
    })
    save_promo_history(history)

    logger.info(f"[PROMO] ‚úÖ –ö–æ–¥ {code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    return results
