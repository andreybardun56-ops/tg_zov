# tg_zov/services/farm_puzzles_auto.py
import asyncio
import json
import os
from datetime import datetime
from aiogram import Bot
from config import ADMIN_IDS
from services.logger import logger
from services import puzzle2_auto

PUZZLE_SUMMARY = "data/puzzle_summary.json"
IS_FARM_RUNNING = False  # üîí –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞—Ä–º –ø–æ–≤—Ç–æ—Ä–Ω–æ


async def read_puzzle_summary() -> dict:
    """–ß–∏—Ç–∞–µ—Ç puzzle_summary.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    if not os.path.exists(PUZZLE_SUMMARY):
        return {}
    try:
        with open(PUZZLE_SUMMARY, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.warning(f"[FARM] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {PUZZLE_SUMMARY}: {e}")
        return {}


def format_puzzle_stats(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–∑–ª–æ–≤ –¥–ª—è Telegram."""
    totals = data.get("totals", {})
    total_accs = data.get("accounts", 0)
    all_dup = data.get("all_duplicates", 0)

    parts = []
    for i in range(1, 10):
        cnt = totals.get(str(i), 0)
        parts.append(f"{i}üß©x{cnt}")
    progress_line = " | ".join(parts)

    text = (
        f"üìä <b>–§–∞—Ä–º –∏–¥—ë—Ç...</b>\n"
        f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{total_accs}</code>\n"
        f"–í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: <code>{all_dup}</code>\n"
        f"{progress_line}"
    )
    return text


async def run_farm_puzzles_for_all(bot: Bot):
    """
    üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞—Ä–º –ø–∞–∑–ª–æ–≤:
    - –≤—ã–∑—ã–≤–∞–µ—Ç puzzle2_auto.main()
    - –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫
    - –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥
    """
    global IS_FARM_RUNNING
    # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
    FILES_TO_CLEAR = [
        "data/puzzle_summary.json",
        "data/puzzle_data.jsonl",
    ]

    for path in FILES_TO_CLEAR:
        try:
            if os.path.exists(path):
                with open(path, "w", encoding="utf-8") as f:
                    f.write("{}" if path.endswith(".json") else "")
                logger.info(f"[FARM] üßπ –§–∞–π–ª {path} –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        except Exception as e:
            logger.warning(f"[FARM] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {path}: {e}")
    # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
    try:
        if os.path.exists(PUZZLE_SUMMARY):
            with open(PUZZLE_SUMMARY, "w", encoding="utf-8") as f:
                json.dump({}, f)
            logger.info(f"[FARM] üßπ –°—Ç–∞—Ä—ã–π {PUZZLE_SUMMARY} –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    except Exception as e:
        logger.warning(f"[FARM] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {PUZZLE_SUMMARY}: {e}")
    if IS_FARM_RUNNING:
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, "‚öôÔ∏è –§–∞—Ä–º —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚è≥")
            except Exception:
                pass
        return

    IS_FARM_RUNNING = True
    start_time = datetime.now()
    logger.info("[FARM] üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –ø–∞–∑–ª–æ–≤")

    # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ —Å—Ç–∞—Ä—Ç–µ
    msg_map = {}
    for admin_id in ADMIN_IDS:
        try:
            msg = await bot.send_message(admin_id, "üß© –§–∞—Ä–º –ø–∞–∑–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω! –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            logger.info(f"[FARM] üì© –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}: id={msg.message_id}")
            msg_map[admin_id] = msg
        except Exception as e:
            logger.warning(f"[FARM] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    async def progress_updater():
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
        first_update_done = False
        logger.info("[FARM] üîÅ –ü—Ä–æ–≥—Ä–µ—Å—Å-–æ–±–Ω–æ–≤–∏—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
        while IS_FARM_RUNNING:
            logger.info("[FARM] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ puzzle_summary...")
            try:
                data = await read_puzzle_summary()
                if data:
                    text = format_puzzle_stats(data)
                    logger.info(f"[FARM] üìà –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data.get('accounts', 0)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    for admin_id, msg in msg_map.items():
                        try:
                            await bot.edit_message_text(
                                text=text,
                                chat_id=str(admin_id),  # ‚úÖ –≤–∞–∂–Ω–æ ‚Äî —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞
                                message_id=msg.message_id,
                                parse_mode="HTML"
                            )
                            logger.info(f"[FARM] ‚úèÔ∏è –û–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {admin_id}")
                        except Exception as e:
                            logger.warning(f"[FARM] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {admin_id}: {e}")

                    if not first_update_done:
                        first_update_done = True
                        await asyncio.sleep(5)
                        continue

                await asyncio.sleep(15)
            except Exception as e:
                logger.warning(f"[FARM] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                await asyncio.sleep(15)

    # üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_task = asyncio.create_task(progress_updater())

    try:
        await puzzle2_auto.main()
    except Exception as e:
        logger.exception(f"[FARM] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è puzzle2_auto.main(): {e}")
    finally:
        IS_FARM_RUNNING = False
        progress_task.cancel()

        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds() / 60
        logger.info(f"[FARM] ‚úÖ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} –º–∏–Ω.")

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await read_puzzle_summary()
        if data:
            text = (
                "‚úÖ <b>–§–∞—Ä–º –ø–∞–∑–ª–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
                + format_puzzle_stats(data)
                + f"\n\nüïì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{duration:.1f} –º–∏–Ω</code>"
            )
        else:
            text = f"‚ö†Ô∏è –§–∞—Ä–º –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {PUZZLE_SUMMARY}"

        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, text, parse_mode="HTML")
                if os.path.exists(PUZZLE_SUMMARY):
                    await bot.send_document(admin_id, document=open(PUZZLE_SUMMARY, "rb"))
            except Exception as e:
                logger.warning(f"[FARM] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        logger.info("[FARM] üì¶ –§–∞—Ä–º –ø–∞–∑–ª–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à—ë–Ω")
