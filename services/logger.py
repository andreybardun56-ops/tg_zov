# tg_zov/services/logger.py
import logging
import os
from datetime import datetime

# üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ logs
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_DIR = os.path.join(BASE_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ –¥–∞—Ç–µ
LOG_FILE = os.path.join(LOG_DIR, f"{datetime.now():%Y-%m-%d}.log")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] [%(name)s] %(message)s",
    handlers=[
        # ‚úÖ –¢–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª, –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
    ],
)

logger = logging.getLogger(__name__)
import time

def cleanup_old_logs(days: int = 3):
    """üßπ –£–¥–∞–ª—è–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    now = time.time()
    deleted = 0

    if not os.path.exists(LOG_DIR):
        return

    for file in os.listdir(LOG_DIR):
        if not file.endswith(".log"):
            continue
        path = os.path.join(LOG_DIR, file)
        try:
            if os.path.isfile(path):
                age_days = (now - os.path.getmtime(path)) / 86400
                if age_days > days:
                    os.remove(path)
                    deleted += 1
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ {file}: {e}")

    if deleted:
        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {deleted}")
